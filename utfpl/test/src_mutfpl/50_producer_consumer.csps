// ===============================


#import "PStack";

#import "MyLib";

// =====================

var<PStack> sys_gstack = new PStack();
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

sch_thread_starter(sys_tid, fn, args) =
  thread_init{sys_gstack.add_frame(sys_tid, args);} ->
  if (fn == 3) {
    producer_42(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else if (fn == 4) {
    consumer_45(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else {Skip}
;

Scheduler() = (atomic{sys_ch_sch?sys_tid.fn.args -> 
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(sys_tid) = 
  thread_finalize{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<Allocator> sys_mutex_manager = new Allocator();

sys_mutex_lock(sys_tid) = sys_mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;

sys_mutex_unlock(sys_tid) = sys_mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_unlock_impl(sys_tid, m) = sys_munlock{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<Allocator> sys_cond_manager = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

sys_cond_wait(sys_tid) = sys_cond_wait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

sys_cond_wait_impl(sys_tid, c, m) = atomic{cadd{cond_holder[c]++;} -> 
                                    sys_mutex_unlock_impl(sys_tid, m); 
                                    cond_chan[c]?_ -> sys_mutex_lock_impl(sys_tid, m)};

sys_cond_signal(sys_tid) = sys_cond_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};


sys_cond_broadcast(sys_tid) = sys_cond_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================
var<LinkedList> sys_list_manager = new LinkedList();

#define sys_list_nil  sys_list_manager.list_nil ();
#define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);

// =====================

var gn_39 = 0;
var m_40 = 0;
var c_41 = 0;
var args_48 = 0;
var args_49 = 0;

producer_42(sys_tid) =
  {  var temp_53 = m_40;
  sys_gstack.frame_push(sys_tid, temp_53);
  } ->
  {  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  sys_mutex_lock(sys_tid);
  {  sys_gstack.retopr_frame(sys_tid);
  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_44(sys_tid)
  ;

loop_44(sys_tid) =
  {  var temp_55 = gn_39;
  sys_gstack.frame_push(sys_tid, temp_55);
  } ->
  {  var temp_56 = call(eq, sys_gstack.frame_get(sys_tid, 0, 1), 1);
  sys_gstack.frame_push(sys_tid, temp_56);
  } ->
  if (sys_gstack.frame_get_bool(sys_tid, 0, 2)) {
    {  var temp_57 = c_41;
    sys_gstack.frame_push(sys_tid, temp_57);
    } ->
    {  var temp_58 = m_40;
    sys_gstack.frame_push(sys_tid, temp_58);
    } ->
    {  var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 3), __temp_list_args);
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 4), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    sys_cond_wait(sys_tid);
    {  sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_44(sys_tid)
  } else {
    {  var temp_76 = gn_39;
    sys_gstack.frame_push(sys_tid, temp_76);
    } ->
    {  var temp_77 = call(add, sys_gstack.frame_get(sys_tid, 0, 3), 1);
    gn_39 = temp_77;
    } ->
    {  var temp_78 = c_41;
    sys_gstack.frame_push(sys_tid, temp_78);
    } ->
    {  var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 4), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    sys_cond_signal(sys_tid);
    {  sys_gstack.retopr_frame(sys_tid);
    var temp_79 = m_40;
    sys_gstack.frame_push(sys_tid, temp_79);
    } ->
    {  var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 5), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    sys_mutex_unlock(sys_tid);
    {  sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    producer_42(sys_tid)
  }
  ;

consumer_45(sys_tid) =
  {  var temp_64 = m_40;
  sys_gstack.frame_push(sys_tid, temp_64);
  } ->
  {  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  sys_mutex_lock(sys_tid);
  {  sys_gstack.retopr_frame(sys_tid);
  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_47(sys_tid)
  ;

loop_47(sys_tid) =
  {  var temp_66 = gn_39;
  sys_gstack.frame_push(sys_tid, temp_66);
  } ->
  {  var temp_67 = call(eq, sys_gstack.frame_get(sys_tid, 0, 1), 0);
  sys_gstack.frame_push(sys_tid, temp_67);
  } ->
  if (sys_gstack.frame_get_bool(sys_tid, 0, 2)) {
    {  var temp_68 = c_41;
    sys_gstack.frame_push(sys_tid, temp_68);
    } ->
    {  var temp_69 = m_40;
    sys_gstack.frame_push(sys_tid, temp_69);
    } ->
    {  var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 3), __temp_list_args);
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 4), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    sys_cond_wait(sys_tid);
    {  sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_47(sys_tid)
  } else {
    {  var temp_81 = gn_39;
    sys_gstack.frame_push(sys_tid, temp_81);
    } ->
    {  var temp_82 = call(sub, sys_gstack.frame_get(sys_tid, 0, 3), 1);
    gn_39 = temp_82;
    } ->
    {  var temp_83 = c_41;
    sys_gstack.frame_push(sys_tid, temp_83);
    } ->
    {  var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 4), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    sys_cond_signal(sys_tid);
    {  sys_gstack.retopr_frame(sys_tid);
    var temp_84 = m_40;
    sys_gstack.frame_push(sys_tid, temp_84);
    } ->
    {  var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 5), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    sys_mutex_unlock(sys_tid);
    {  sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_list_manager.list_nil ();
    __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    consumer_45(sys_tid)
  }
  ;

// =====================

main_s(sys_tid) = 
  main_init{var __temp_list_args = sys_list_manager.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } ->
  {  gn_39 = 0;
  } ->
  {  var temp_50 = sys_mutex_manager.allocate();
  sys_gstack.frame_push(sys_tid, temp_50);
  } ->
  {  m_40 = sys_gstack.frame_get(sys_tid, 0, 0);
  } ->
  {  var temp_51 = sys_cond_manager.allocate();
  sys_gstack.frame_push(sys_tid, temp_51);
  } ->
  {  c_41 = sys_gstack.frame_get(sys_tid, 0, 1);
  } ->
  {  var args_48 = sys_list_nil;
  var args_49 = call(sys_list_cons, 0, args_48);
  } ->
  sys_thread_create(1, 3, args_49);
  sys_thread_create(2, 4, args_49); 
  proc_thread_finalize(sys_tid);

main = main_s(0) ||| Scheduler;
// ||| mutex_allocator ||| cond_allocator;


