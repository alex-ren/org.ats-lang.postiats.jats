
var gv1 := 1
var gv2
val g1 = 3

var gv[3]

fun foo1(x) = let
  gv1 := 2
  val () = 3
in
  ()
end

fun foo2() = let
  val x = 4
in
  3
end

fun foo3() = let
  val () = sys_set_array(3, gv, 2)
  val x = sys_get_array(gv, 1)
  val () = foo1(sys_get_array(gv, 1))
in
  sys_get_array(gv, 2)
end

fun foo4() = let
  val x = if 3 then 2 else sys_get_array(gv, 2)
  val y = sys_allocate_mutex()
in
  if 4 then if 3 then 2 else sys_get_array(gv, x) else 1
end


fun foo5() = let
  gv1 := if gv1 then 1 else 4
in
  3
end

fun foo6() = let
  val x = 3
  fun foo61(y) = let
    val z = add (x, y)
  in
    z
  end
in
  foo61 (3)
end

fun foo7() = let
  val x = 1
  val y = if x then let val z = 2 in if z then add (x, 1) else add (1, x) end
               else 3
  val q1 = 33
  val q2 = add (q1, y)
in
  q2
end

fun foo8() = let
in
  sys_set_array(3, gv, 2)
end

fun foo9() =
if 1 then let
  val x = 1
in x end
else 2


fun foo10(z) = let
  val x = 1
  gv2 := 3
  val y = 2
  gv2 := x
in
  foo5()
end

fun foo11 (x) = x

               
               
               
               
               
               
               
               

