// ===============================

#define sys_list_nil()  sys_list_manager.list_nil ()
#define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs)

// ===============================


#import "PStack";

#import "MyLib";

// =====================

var<PStack> sys_gstack = new PStack();
var<ThreadAllocator> sys_tid_allocator = new ThreadAllocator();

var sys_thread_num = 1;

channel sys_ch_sch 0;

Scheduler() = atomic{sys_ch_sch?sys_tid.fn.args -> {sys_thread_num++;} -> Skip} ->
  thread_init{sys_gstack.add_frame(sys_tid, args);} ->
    Skip


  ||

  ifa (sys_thread_num == 0) {Skip}
  ;

thread_finalize(sys_tid) = 
  thread_finalize{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  }

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<MutexManager> sys_mutex_manager = new MutexManager();

mutex_lock(sys_tid) = mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;

mutex_unlock(sys_tid) = mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

mutex_unlock_impl(sys_tid, m) = munlock{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<CondManager> sys_cond_manager = new CondManager();

channel cond_chan[10] 0;
var cond_count = 0;

cond_wait(sys_tid) = cons_wait_impl(sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

cond_wait_impl(sys_tid, c, m) = atomic{cadd{cond_holder[c]++;} -> 
                                    mutex_unlock_impl(sys_tid, m); 
                                    cond_chan[c]?_ -> mutex_lock_impl(tid, m)};

cond_signal(sys_tid) = cond_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};


cond_broadcast(sys_tid) = cond_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {

          signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> signaln(c, n-1)}
                else {Skip}
                ;

// =====================

var gm_37 = 0;
var gc_38 = 0;


// =====================

main_s(sys_tid) = 
  main_init{var __temp_list_args = sys_list_manager.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            sys_thread_num++} ->
  {  var gm_37 = sys_mutex_manager.alloc();
  } ->
  {  var gc_38 = sys_cond_manager.alloc();
  } ->
  {  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (gc_38, __temp_list_args);
  __temp_list_args = sys_list_manager.list_cons (gm_37, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  sys_cond_wait();
  {  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (gc_38, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  sys_cond_signal();
  {  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (gc_38, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  sys_cond_broadcast();
  {  sys_cond_manager.release(gc_38);
  } ->
  Skip; 
  thread_finalize(sys_tid);

main = main_s(0) ||| Scheduler;
// ||| mutex_allocator ||| cond_allocator;


