// ===============================



#import "MyLib";

// =====================

var<PStack> sys_gstack = new PStack();
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

sch_thread_starter(sys_tid, fn, args) =
  thread_init{sys_gstack.add_frame(sys_tid, args);} ->
  if (fn == 3) {
    loop_write_56(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else if (fn == 4) {
    loop_read_58(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else {Skip}
;

Scheduler() = (atomic{sys_ch_sch?sys_tid.fn.args -> 
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(sys_tid) = 
  thread_finalize{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<Allocator> sys_mutex_manager = new Allocator();

sys_mutex_lock(sys_tid) = sys_mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;

sys_mutex_unlock(sys_tid) = sys_mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_unlock_impl(sys_tid, m) = sys_munlock{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<Allocator> sys_cond_manager = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

sys_cond_wait(sys_tid) = sys_cond_wait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

sys_cond_wait_impl(sys_tid, c, m) = atomic{cadd{cond_holder[c]++;} -> 
                                    sys_mutex_unlock_impl(sys_tid, m); 
                                    cond_chan[c]?_ -> sys_mutex_lock_impl(sys_tid, m)};

sys_cond_signal(sys_tid) = sys_cond_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};


sys_cond_broadcast(sys_tid) = sys_cond_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================
var<LinkedList> sys_list_manager = new LinkedList();

#define sys_list_nil  sys_list_manager.list_nil ();
#define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
#define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
#define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
#define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// =====================

var L = 0;
var R = 0;
var slot[2];
var data[4];
var content = 0;

writer_48(sys_tid) =
  {  var temp_62 = R;
  sys_gstack.frame_push(sys_tid, temp_62);
  } ->
  {  var wp_50 = call(sub, 1, sys_gstack.frame_get(sys_tid, 0, 1));
  sys_gstack.frame_push(sys_tid, wp_50);
  var temp_63 = slot[wp_50];
  sys_gstack.frame_push(sys_tid, temp_63);
  } ->
  {  var wi_51 = call(sub, 1, sys_gstack.frame_get(sys_tid, 0, 3));
  sys_gstack.frame_push(sys_tid, wi_51);
  var temp_64 = call(mul, 2, sys_gstack.frame_get_int(sys_tid, 0, 2));
  var temp_65 = call(add, temp_64, wi_51);
  var temp_66 = call(neg, 1);
  data[temp_65] = temp_66
  } ->
  {  var temp_67 = call(mul, 2, sys_gstack.frame_get_int(sys_tid, 0, 2));
  var temp_68 = call(add, temp_67, sys_gstack.frame_get_int(sys_tid, 0, 4));
  data[temp_68] = 1
  } ->
  {  slot[sys_gstack.frame_get_int(sys_tid, 0, 2)] = sys_gstack.frame_get_int(sys_tid, 0, 4)
  } ->
  {  L = sys_gstack.frame_get_int(sys_tid, 0, 2);
  } ->
  {  sys_gstack.frame_push(sys_tid, 0);
  } ->
  Skip
  ;

reader_52(sys_tid) =
  {  var rp_53 = L;
  sys_gstack.frame_push(sys_tid, rp_53);
  } ->
  {  R = sys_gstack.frame_get_int(sys_tid, 0, 0);
  } ->
  {  var ri_54 = slot[sys_gstack.frame_get_int(sys_tid, 0, 0)];
  sys_gstack.frame_push(sys_tid, ri_54);
  } ->
  {  var temp_70 = call(mul, 2, sys_gstack.frame_get_int(sys_tid, 0, 0));
  var temp_71 = call(add, temp_70, sys_gstack.frame_get(sys_tid, 0, 1));
  var x_55 = data[temp_71];
  sys_gstack.frame_push(sys_tid, x_55);
  } ->
  {  content = sys_gstack.frame_get(sys_tid, 0, 2);
  } ->
  {  sys_gstack.frame_push(sys_tid, sys_gstack.frame_get(sys_tid, 0, 2));
  } ->
  Skip
  ;

loop_write_56(sys_tid) =
  {  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (1, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  writer_48(sys_tid);
  {  sys_gstack.retopr_frame(sys_tid);
  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_write_56(sys_tid)
  ;

loop_read_58(sys_tid) =
  {  var __temp_list_args = sys_list_manager.list_nil ();
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  reader_52(sys_tid);
  {  var x_60 = sys_gstack.retopr_frame(sys_tid);
  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_read_58(sys_tid)
  ;

// =====================

main_s(sys_tid) = 
  main_init{var __temp_list_args = sys_list_manager.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } ->
  {  L = 0;
  } ->
  {  R = 0;
  } ->
  {  content = 0;
  } ->
  {  var temp_74 = call(neg, 2);
  data[0] = temp_74
  } ->
  {  var temp_75 = call(neg, 2);
  data[1] = temp_75
  } ->
  {  var temp_76 = call(neg, 2);
  data[2] = temp_76
  } ->
  {  var temp_77 = call(neg, 2);
  data[3] = temp_77
  } ->
  {  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (0, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  writer_48(sys_tid);
  {  sys_gstack.retopr_frame(sys_tid);
  var temp_78 = sys_list_nil;
  var temp_79 = call(sys_list_cons, 0, temp_78);
  sys_gstack.frame_push(sys_tid, temp_79);
  } ->
  sys_thread_create(1, 3, sys_gstack.frame_get(sys_tid, 0, 0));
  {  var temp_80 = sys_list_nil;
  var temp_81 = call(sys_list_cons, 0, temp_80);
  sys_gstack.frame_push(sys_tid, temp_81);
  } ->
  sys_thread_create(2, 4, sys_gstack.frame_get(sys_tid, 0, 1)); 
  proc_thread_finalize(sys_tid);

main = main_s(0) ||| Scheduler;



#assert main deadlockfree;

#define Prop1 (content == 1);
#define Prop2 (content != 1);
#define Prop3 (content != -1);
#define Prop4 (content != -2);

#assert main |= (G Prop2) || (F G Prop1);
#assert main |= G Prop3;
#assert main |= F G Prop1;

#assert main |= G Prop4;



