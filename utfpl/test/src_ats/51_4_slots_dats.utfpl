val L_63 = D2Ecst<sys_gvar_create_2454> (0)
val R_64 = D2Ecst<sys_gvar_create_2454> (0)
val slot_65 = D2Ecst<sys_garr_create_2457> (2, 0)
val data_66 = D2Ecst<sys_garr_create_2457> (4, 0)
val content_67 = D2Ecst<sys_gvar_create_2454> (0)
fun writer_68 = lam (pat<x_69>) = 
  let
    val wp_70 = D2Esym<-> (1, D2Ecst<sys_gvar_get_2456> (R_64))
    val wi_71 = D2Esym<-> (1, D2Ecst<sys_garr_get_2459> (slot_65, wp_70))
    val () = D2Ecst<sys_garr_update_2458> (data_66, D2Esym<+> (D2Esym<*> (2, wp_70), wi_71), D2Esym<~> (1))
    val () = D2Ecst<sys_garr_update_2458> (data_66, D2Esym<+> (D2Esym<*> (2, wp_70), wi_71), 1)
    val () = D2Ecst<sys_garr_update_2458> (slot_65, wp_70, wi_71)
    val () = D2Ecst<sys_gvar_update_2455> (L_63, wp_70)
  in
    ()
  end
fun reader_72 = lam () = 
  let
    val rp_73 = D2Ecst<sys_gvar_get_2456> (L_63)
    val () = D2Ecst<sys_gvar_update_2455> (R_64, rp_73)
    val ri_74 = D2Ecst<sys_garr_get_2459> (slot_65, rp_73)
    val x_75 = D2Ecst<sys_garr_get_2459> (data_66, D2Esym<+> (D2Esym<*> (2, rp_73), ri_74))
    val () = D2Ecst<sys_gvar_update_2455> (content_67, x_75)
  in
    x_75
  end
fun loop_write_76 = lam (pat<arg_77>) = 
  let
    val () = writer_68 (1)
  in
    loop_write_76 (arg_77)
  end
fun loop_read_78 = lam (pat<arg_79>) = 
  let
    val x_80 = reader_72 ()
  in
    loop_read_78 (arg_79)
  end
val () = D2Ecst<sys_garr_update_2458> (data_66, 0, D2Esym<~> (2))
val () = D2Ecst<sys_garr_update_2458> (data_66, 1, D2Esym<~> (2))
val () = D2Ecst<sys_garr_update_2458> (data_66, 2, D2Esym<~> (2))
val () = D2Ecst<sys_garr_update_2458> (data_66, 3, D2Esym<~> (2))
val () = writer_68 (0)
val () = D2Ecst<sys_thread_create_2461> (1, loop_write_76, 0)
val () = D2Ecst<sys_thread_create_2461> (2, loop_read_78, 0)
%{
#assert main deadlockfree;

#define Prop1 (content == 1);
#define Prop2 (content != 1);
#define Prop3 (content != -1);
#define Prop4 (content != -2);

#assert main |= (G Prop2) || (F G Prop1);
#assert main |= G Prop3;
#assert main |= F G Prop1;

#assert main |= G Prop4;

%}