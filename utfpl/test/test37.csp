#import "PStack";

#import "MyLib";

// =====================

var<PStack> GStack = new PStack();
var SysTid = 0;

channel SysChSch 0;
channel SysChSchStart 0;

createThread(par, fn, arg) = SysChSch!fn.arg -> Skip;

Scheduler = SysChSch?fn.arg ->
  initSch{SysTid++; var tid = SysTid; GStack.allocateStack(tid);} ->
  if (fn == 5) {
    consumer_s_132(false, SysTid, arg)
    |||
    SchedulerW(SysTid)
  } else {
    if (fn == 4) {
      producer_s_130(false, SysTid, arg)
      |||
      SchedulerW(SysTid)
    }
  }
  ;


SchedulerW (tid) = SysChSchStart?tid -> Scheduler;

// =====================

var mutex[10];  // 10 mutex
var mutex_count = 0;
channel mutex_req 0;
channel mutex_reply 0;

mutex_allocator = mutex_req?_ -> {mutex_count++} -> mutex_reply!mutex_count -> mutex_allocator;
mutex_allocate(tid) = mutex_req!1 -> mutex_reply?m -> { GStack.push(tid, m) } -> Skip;

mutex_lock(tid, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;

mutex_unlock(tid, m) = munlock{mutex[m] = 0} -> Skip;

// ======================

var cond_holder[10];  // 10 condition
channel cond_chan[10] 0;
var cond_count = 0;
channel cond_req 0;
channel cond_reply 0;

cond_allocator = cond_req?_ -> {cond_count++} -> cond_reply!cond_count -> cond_allocator;
cond_allocate(tid) = cond_req!1 -> cond_reply?m -> { GStack.push(tid, m) } -> Skip;

cond_wait(tid, c, m) = atomic{cadd{cond_holder[c]++;} -> mutex_unlock(tid, m); cond_chan[c]?_ -> mutex_lock(tid, m)};

cond_signal(tid, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};


cond_broadcast(tid, c) = atomic{if (cond_holder[c] > 0) {

          signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> signaln(c, n-1)}
                else {Skip}
                ;

// =====================

var gn_113;
var m_114;
var c_115;

producer_116(isTailCall, tid, x_117) =
  preloge{
    if (isTailCall) {
      GStack.reloadFrame(tid);
    } else {
      GStack.newFrame(tid);
    }
  } ->
  mutex_lock(tid, m_114);
  cond_wait(tid, c_115, m_114);
  mutex_unlock(tid, m_114);
  producer_116(true, tid, x_117)
  ;

consumer_118(isTailCall, tid, x_119) =
  preloge{
    if (isTailCall) {
      GStack.reloadFrame(tid);
    } else {
      GStack.newFrame(tid);
    }
  } ->
  mutex_lock(tid, m_114);
  cond_signal(tid, c_115);
  mutex_unlock(tid, m_114);
  consumer_118(true, tid, x_119)
  ;

producer_s_130(isTailCall, tid, x_129) =
  preloge{
    if (isTailCall) {
      GStack.reloadFrame(tid);
    } else {
      GStack.newFrame(tid);
    }
  } ->
  SysChSchStart!tid ->
  producer_116(isTailCall, tid, x_129)
  ;
consumer_s_132(isTailCall, tid, x_131) =
  preloge{
    if (isTailCall) {
      GStack.reloadFrame(tid);
    } else {
      GStack.newFrame(tid);
    }
  } ->
  SysChSchStart!tid ->
  consumer_118(isTailCall, tid, x_131)
  ;

main_s(tid) = 
  main_preloge {GStack.allocateStack(tid); GStack.newFrame(tid); GStack.newFrame(tid);} -> 
  {  gn_113 = 0;
  } ->
  mutex_allocate(tid);
  {  m_114 = GStack.get(tid, 0, 0);
  } ->
  cond_allocate(tid);
  {  c_115 = GStack.get(tid, 0, 1);
  } ->
  createThread(tid, 4, 0);
  createThread(tid, 5, 0);
  {  var main_ret_125 = 0;
  GStack.deleteFrame(tid); GStack.push(tid, main_ret_125);
  } ->
  Skip;

main = main_s(0) ||| Scheduler ||| mutex_allocator ||| cond_allocator;


#assert main deadlockfree;

#define Prop1 (gn_22 < 2);

#assert main |= G Prop1;
