group ins;


func_call_ins_st(holder, funlab, args, is_tail) ::= <<
InsCall[<is_tail>](<funlab>, (<args; separator=", ">), <holder>)
>>

// func_call_ins_no_ret_st(funlab, args) ::= <<
// func_call-- _ = <funlab>(<args; separator=", ">)
// >>

func_def_ins(name, paralst, body, ret) ::= <<
fun <name> (<paralst; separator=", ">)
{
  // ret is <ret>
  <body>
}
>>

func_def(name, paralst, body) ::= <<
fun <name> (<paralst; separator=", ">)
{
  <body>
}
>>


func_group_ins_st(insLst) ::= <<
<insLst; separator="\nand\n">

>>

cond_ins_st(holder, cond, btrue, bfalse) ::= <<
// holder is <holder>
if <cond> then
  <btrue>
else
  <bfalse>

>>


move_ins_st(holder, vp) ::= <<
move_ins(<vp>, <holder>)
>>

tid_st(id) ::= <<
<id>
>>


atom_value_st(v) ::= <<
<v>
>>

tuple_value_st(ele_lst) ::= <<
(<ele_lst; separator=", ">)
>>

inslst_st(inslst) ::= <<<inslst; separator="\n">
>>

program_st(gv_def_lst, ins_lst, func_lst) ::= <<
<gv_def_lst; separator="\n">

<inslst_st(ins_lst)>

<func_lst; separator="\n\n">

>>



global_array_st(id, size) ::= <<
gvar <id>[<size>]
>>

global_value_st(id) ::= <<
gval <id>
>>

global_variable_st(id) ::= <<
gvar <id>
>>

store_array_ins_st(lv, gv, index) ::= <<
store_array_ins(<lv>, <gv>, <index>)
>> 

store_ins_st(lv, gv) ::= <<
store_ins(<lv>, <gv>)
>>

ret_ins_st(v) ::= <<
return_ins<if(v)> <v><endif>
>>

load_array_ins_st(gv, index, lv) ::= <<
load_array_ins(<gv>, <index>, <lv>)
>> 

load_ins(gv, lv) ::= <<
load_ins(<gv>, <lv>)
>>

create_thread_ins_st(tid, funlab, args) ::= <<
create_thread_ins(<tid>, <funlab>, <args>)
>>


mutex_allocate_ins_st(holder) ::= <<
alloc_mutex_ins(<holder>)
>>

mutex_release_ins_st(mutex) ::= <<
release_mutex_ins(<mutex>)
>>


cond_allocate_ins_st(holder) ::= <<
alloc_cond_ins(<holder>)
>>

cond_release_ins_st(cond) ::= <<
release_cond_ins(<cond>)
>>


        
        
        
        
        








