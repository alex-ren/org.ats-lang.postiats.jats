group ins;


func_call_ins_st(holder, funlab, args) ::= <<
func_call-- <holder> = <funlab>(<args; separator=", ">)
>>

// func_call_ins_no_ret_st(funlab, args) ::= <<
// func_call-- _ = <funlab>(<args; separator=", ">)
// >>

func_def_ins(name, paralst, body, ret) ::= <<
fun <name> (<paralst; separator=", ">)
{
  // ret is <ret>
  <body>
}

>>

return_ins_st(ret) ::= <<
return <ret>
>>

cond_ins_st(holder, cond, btrue, bfalse) ::= <<
// holder is <holder>
if <cond> then
  <btrue>
else
  <bfalse>

>>


move_ins_st(holder, vp) ::= <<
move-- <holder> = <vp>
>>

tid_st(id) ::= <<
<id>
>>


atom_value_st(v) ::= <<
<v>
>>

tuple_value_st(ele_lst) ::= <<
(<ele_lst; separator=", ">)
>>


inslst_st(inslst) ::= <<<inslst; separator="\n">
>>

var_def_st(var) ::= <<
var <var>
>>

var_lst_st(vardeflst)  ::= <<
<vardeflst:var_def_st(); separator="\n">
>>

program_st(vardeflst, inslst) ::= <<
<var_lst_st(vardeflst)>

<inslst_st(inslst)>

>>

// The following templates are not used now.

var_def_ins_unused_st(holder) ::= <<

var_def_ins_unused_st-- var <holder>
>>


var_def_ins_used_st(holder) ::= <<
var_def_ins_used_st-- var <holder>
>>
