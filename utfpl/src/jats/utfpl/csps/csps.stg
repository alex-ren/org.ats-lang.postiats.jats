group csps;

blk_lst_st(blklst) ::= <<
<if(blklst)><blklst; separator=";\n"><else>Skip<endif>
>>

event_block_st(inslst, evt) ::= <<
<if(evt)><evt><else>step<endif> {
  <inslst; wrap="\n    ", separator="\n">} -> Skip
>>

cond_block_st(cond, btrue, bfalse) ::= <<
ifa (<cond>) {
  <btrue> 
} else { 
  <bfalse> 
}
>>

process_call_block_st(lab, args, holder) ::= <<
<holder> = <lab>(<if(args)>tid, <args; separator=", "><else>tid<endif>)
>>

move_ins_st(dst, src, v, push, ret) ::= <<
<dst> = <src>; <if(push)><put_to_stack_st(v)>;<endif>
>>

fun_call_ins_st(dst, lab, args, v, push, ret) ::= <<
<dst> = call(<lab><if(args)>, <endif><args; separator=", ">); <if(push)><put_to_stack_st(v)>;<endif>
>>

para_def_st(v) ::= <<
<v>
>>

val_def_st(v) ::= <<
var <v>
>>

val_use_name_st(v) ::= <<
<v>
>>

val_use_stack_st(v, loc) ::= <<
<get_from_stack_st(loc)>
>>

val_use_stack_bool_st(v, loc) ::= <<
<get_from_stack_bool_st(loc)>
>>

atom_val_st(v) ::= <<
<v>
>>

tuple_val_st(ele_lst) ::= <<
(<ele_lst; separator=", ">)
>>

global_id_st(id) ::= <<
<id>
>>

return_st(v) ::= <<
<delete_frame_st()>;<put_to_stack_st(v)>;
>>

// ============================
// Library functions

get_from_stack_st(loc) ::= <<
GStack.get(tid, <loc.frame>, <loc.offset>)
>>

get_from_stack_bool_st(loc) ::= <<
GStack.getBool(tid, <loc.frame>, <loc.offset>)
>>

put_to_stack_st(v) ::= <<
GStack.push(tid, <v>)
>>

new_frame_st() ::= <<
GStack.newFrame(tid)
>>

delete_frame_st() ::= <<
GStack.deleteFrame(tid)
>>

// ============================

gvar_lst_st(gvarlst) ::= <<
<gvarlst:gvar_def_st(); separator="\n">
>>

gvar_def_st(gvar) ::= <<
var <gvar>;
>>

proc_lst_st(proclst) ::= <<
<proclst; separator="\n\n">
>>

main_proc_st(mainlab, body) ::= <<
<mainlab>(tid) = preloge{<new_frame_st()>;} -> Skip;
<body>;

>>


proc_def_st(lab, paras, esc_paras, body) ::= <<
<lab>(<if(paras)>tid, <paras; separator=", "><else>tid<endif>) = <proc_preloge_st(esc_paras)> -> 
<body>;
>>

proc_preloge_st(paras) ::= <<
preloge{<new_frame_st()>; <paras:{x| spush(tid, <x>)}; separator=";">}
>>


program_st(gvarlst, proclst, mainproc, mainlab) ::= <<
<gvar_lst_st(gvarlst)>

<proc_lst_st(proclst)>

<mainproc>

>>


// ======The following has no use now=========================

// grp_empty_st() ::= <<
// Skip;
// >>
// 
// grp_lst_evt_st(lst) ::= <<
// <lst> -> Skip;
// >>
// 
// grp_lst_proc_st(lst) ::= <<
// <lst>;
// >>
// 
// event_process_st(evt, proc) ::= <<
// <evt> -> <proc;wrap="\n">
// >>
// 
// event_event_st(evt1, evt2) ::= <<
// <evt1> -> <evt2;wrap="\n">
// >>
// 
// process_event_st(proc, evt) ::= <<
// <proc>; <evt;wrap="\n">
// >>
// 
// process_process_st(proc1, proc2) ::= <<
// <proc1>; <proc2;wrap="\n">
// >>

