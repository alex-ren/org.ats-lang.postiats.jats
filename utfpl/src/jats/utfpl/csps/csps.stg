group csps;

grp_lst_evt_st(lst) ::= <<
<lst> -> Skip;
>>

grp_lst_proc_st(lst) ::= <<
<lst>;
>>

event_process_st(evt, proc) ::= <<
<evt> -> <proc>
>>

event_event_st(evt1, evt2) ::= <<
<evt1> -> <evt2>
>>

process_event_st(proc, evt) ::= <<
<proc>; <evt>
>>

process_process_st(proc1, proc2) ::= <<
<proc1>; <proc2>
>>

event_block_st(inslst) ::= <<
step{<inslst; separator=" ">}
>>

cond_block_st(cond, btrue, bfalse) ::= <<
ifa (<cond>) then {<btrue>}
else {<bfalse>}
>>

process_call_block_st(lab, args) ::= <<
<lab>(<args; separator=", ">)
>>

move_ins_st(dst, src) ::= <<
<dst> = <src>;
>>

fun_call_ins_st(dst, lab, args) ::= <<
<dst> = <lab>(<args; separator=", ">);
>>

temp_val_st(v) ::= <<
<v>
>>

global_id_st(id) ::= <<
<id>
>>

local_id_def_st(id) ::= <<
var <id>
>>

local_id_use_st(id) ::= <<
<id>
>>

gvar_lst_st(gvarlst) ::= <<
<gvarlst:gvar_def_st(); separator="\n">
>>

gvar_def_st(gvar) ::= <<
var <gvar>
>>

proc_lst_st(proclst) ::= <<
<proclst; separator="\n">
>>

main_proc_st(mainlab, body) ::= <<
<mainlab>() = <body>
>>

proc_st(lab, paras, body) ::= <<
<lab>(<paras; separator="\n">) = <body>
>>


program_st(gvarlst, proclst, mainproc, mainlab) ::= <<
<gvar_lst_st(gvarlst)>

<proc_lst_st(proclst)>

<mainproc>

<mainlab>()
>>




