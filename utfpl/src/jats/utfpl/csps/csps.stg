group csps;

blk_lst_st(blklst) ::= <<
<if(blklst)><blklst; separator=";\n"><else>Skip<endif>
>>

event_block_st(inslst) ::= <<
step {
  <inslst; wrap="\n    ", separator="\n">
} -> Skip
>>

cond_block_st(cond, btrue, bfalse) ::= <<
ifa (<cond>) {
  <btrue> 
} else { 
  <bfalse> 
}
>>

process_call_block_st(lab, args, holder) ::= <<
<holder>\<process> = <lab>(<if(args)>tid, <args; separator=", "><else>tid<endif>)
>>

// =====================================

move_ins_st(src, dst, escape) ::= <<
<dst><if(escape)>\<escaped><endif> = <src>;
>>

fun_call_ins_st(dst, lab, args, escape) ::= <<
<dst><if(escape)>\<escaped><endif> = call(<lab><if(args)>, <endif><args; separator=", ">);
>>

return_ins_st(v) ::= <<
return <v>;
>>

load_ins_st(src, dst, escape) ::= <<
<dst><if(escape)>\<escaped><endif> = <src>;
>>

load_array_ins_st(src, ind, dst, escape) ::= <<
<dst><if(escape)>\<escaped><endif> = <src>[<ind>];
>>

mutex_alloc_ins_st(dst, escape) ::= <<
<dst><if(escape)>\<escaped><endif> = mutex_alloc();
>>

store_ins_st(src, dst) ::= <<
<dst> = <src>;
>>

store_array_ins_st(src, dst, ind) ::= <<
<dst>[<ind>] = <src>;
>>

cond_ins_st(cond, tbranch, fbranch) ::= <<
if (<cond>) {
  <tbranch; wrap="\n    ", separator="\n">
} else {
  <fbranch; wrap="\n    ", separator="\n">
}
>>

// =====================================

vardef_ins_st(holder) ::= <<
var <holder>
>>

global_id_st(id) ::= <<
<id>
>>

para_def_st(v) ::= <<
<v>
>>

val_def_st(v) ::= <<
var <v>
>>

val_use_name_st(v) ::= <<
<v>
>>

val_use_stack_st(v, loc) ::= <<
<v> from \<<get_from_stack_st(loc)>\>
>>

val_use_stack_bool_st(v, loc) ::= <<
<v> from \<<get_from_stack_bool_st(loc)>\>
>>

atom_val_st(v) ::= <<
<v>
>>

tuple_val_st(ele_lst) ::= <<
(<ele_lst; separator=", ">)
>>

// ============================
// Library functions

get_from_stack_st(loc) ::= <<
GStack(<loc.offset>)
>>

get_from_stack_bool_st(loc) ::= <<
GStack(<loc.frame>, <loc.offset>)
>>

// ============================

gvar_lst_st(gvarlst) ::= <<
<gvarlst; separator="\n">
>>

gvar_def_st(gvar) ::= <<
var <gvar>;
>>

garray_def_st(gvar, sz) ::= <<
var <gvar>[<sz>];
>>

proc_lst_st(proclst) ::= <<
<proclst; separator="\n\n">
>>

main_proc_st(mainlab, body) ::= <<
<mainlab>(tid) = 
<body>;

>>


proc_def_st(lab, paras, body) ::= <<
<lab>(<if(paras)>tid, <paras; separator=", "><else>tid<endif>) =
<body>;
>>

proc_preloge_st(paras) ::= <<
<paras:{x| spush(tid, <x>)}; separator=";">
>>


program_st(gvarlst, proclst, mainproc, mainlab) ::= <<
<gvar_lst_st(gvarlst)>

<proc_lst_st(proclst)>

<mainproc>

>>


