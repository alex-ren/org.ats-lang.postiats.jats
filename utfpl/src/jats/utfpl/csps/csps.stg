group csps;

grp_lst_evt_st(lst) ::= <<
<lst> -> Skip
>>

grp_lst_proc_st(lst) ::= <<
<lst>
>>

event_process_st(evt, proc) ::= <<
<evt> -> <proc>
>>

event_event_st(evt1, evt2) ::= <<
<evt1> -> <evt2>
>>

process_event_st(proc, evt) ::= <<
<proc>; <evt>
>>

process_process_st(proc1, proc2) ::= <<
<proc1>; <proc2>
>>

event_block_st(inslst) ::= <<
step{<inslst; separator="; ">}
>>

cond_block_st(cond, btrue, bfalse) ::= <<
ifa (<cond>) then {<btrue>}
else {<bfalse>}
>>

process_call_block_st(lab, paralst) ::= <<
<lab>(<paralst; separator=", ")
>>

advanced_block_lst_st(blklst) ::= <<
<blklst; separator="; ">
>>

global_var_def_st(var) ::= <<
var <var>;
>>

process_def_st(lab, paras, body) ::= <<
<lab>(<paras; separator=", ") = <body>
>>

deflst_st(deflst) ::= <<
<deflst; separator="\n\n">
>>




func_call_ins_st(holder, funlab, args) ::= <<
<holder> = <funlab>(<args; separator=", ">)
>>


move_ins_st(holder, vp) ::= <<
<holder> = <vp>
>>

tid_st(id) ::= <<
<id>
>>


atom_value_st(v) ::= <<
<v>
>>


program_st(gvlst, proclst) ::= <<
// todo
<proclst; separator="\n\m">
>>

