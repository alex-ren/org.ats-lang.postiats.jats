group instructions;

prog_st(fun_defs, main_inss) ::= <<
<fun_defs; separator="\n\n">

fun main0 () =
  <main_inss; separator="\n">
>>

DefFunGroup_st(fun_defs, fun_lab) ::= <<
<fun_lab> <fun_defs; separator="\nand\n">
>>

DefFun_st(name, paras, clo_info, ret_type, body) ::= <<
<name> (<paras; separator=", ">):\<<clo_info>\> <ret_type> =
  <body; separator="\n">
>>

ImplFun_st(name, paras, clo_info, ret_type, body) ::= <<
implement <name> (<paras; separator=", ">):\<<clo_info>\> <ret_type> =
  <body; separator="\n">
>>

InsClosure_st(funname, envname) ::= <<
<funname>.closure(<envname>)
>>

InsCond_st(holder, cond, tb, fb) ::= <<
<holder> = if (<cond>) then
    <tb; separator="\n">
  else
    <fb; separator="\n">
>>

InsMove_st(holder, from) ::= <<
<holder> = <from>
>>

InsCall_st(holder, fun, args) ::= <<
<holder> = <fun>(<args; separator=", ">)
>>

InsFormEnv_st(holder, eles) ::= <<
<holder> = {<eles; separator=", ">}
>>




