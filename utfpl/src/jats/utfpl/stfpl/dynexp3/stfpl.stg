group stfpl;

stfpl_prog_st(d3ecs) ::= <<
<d3ecs; separator="\n\n">
>>

D3Cdatdecs_st(knd, scsts) ::= <<
datatype(<knd>)<scsts; separator="\nand ">
>>

// handle Cs2cst
s2cst_st(s2cst) ::= <<
<symbol_st(s2cst.symbol)>_<stamp_st(s2cst.stamp)>
>>

D3Cdcstdecs_st(knd, dcsts) ::= <<
<knd> <dcsts; separator="\nand ">
>>

dcstkind_st(knd) ::= <<
<knd>
>>

// handle Cd3cst
d3cst_st(sym, stamp, stype) ::= <<
<symbol_st(sym)>_<stamp_st(stamp)>:<stype>
>>

D3Cextcode_st(extcode) ::= <<
%{<extcode>%}
>>

D3Cfundecs_st(knd, env, f3ds) ::= <<
<knd> {env: <env;separator=", ">} <f3ds; separator="\nand ">
>>

funkind_st(knd) ::= <<
<knd>
>>

f3undec_st(loc, var, stype, p3ts, clo, body) ::= <<
<d3var_st(var)>: <stype> = lam (<p3ts; separator=", ">) \<<clo>\> = <body>
>>

// handle Cd3var
d3var_st(d3var) ::= <<
<symbol_st(d3var.symbol)>_<stamp_st(d3var.stamp)>
>>

d3exp_st(d3exp_node) ::= <<
<d3exp_node>
>>

D3Eapplst_st(fun, args) ::= <<
<fun> (<args; separator=", ">)
>>

D3EXPARGdyn_st(d3exps) ::= <<
<d3exps;separator=", ">
>>

D3Ecst_st(cst) ::= <<
D3Ecst\<<cst>\>
>>

D3Ef0loat_st(flt) ::=<<
<flt>
>>

D3Ei0nt_st(int) ::=<<
<int>
>>


D3Eifopt_st(testa, thena, elsea) ::= <<
if (<testa>) then
  <thena>
else
  <elsea>
>>

D3ElamDyn_st(p3ts, exp, clo) ::= <<
lam (<p3ts; separator=", ">) \<<clo>\> = 
  <exp>
>>

p3at_st(node) ::= <<
<node>
>>

P3Tany_st() ::= <<
_
>>

P3Tempty_st() ::= <<
()
>>

P3Trec_st(isbox, labpats) ::= <<
<if(isbox)>'<else>@<endif>{<labpats; separator=", ">}
>>

LABP3ATnorm_st(lab, pat) ::= <<
<lab> = <pat>
>>

P3Tvar_st(var, type) ::= <<
<d3var_st(var)>: <type>
>>

D3Elet_st(d3cs, d3e_body) ::= <<
let
  <d3cs; separator="\n">
in
  <d3e_body>
end
>>

D3Es0tring_st(str) ::= <<
<str>
>>

D3Esym_st(d3sym) ::= <<
<d3sym_st(d3sym)>
>>

// handle Cd3sym
d3sym_st (d3sym) ::= <<
<symbol_st(d3sym.m_name)>
>>

// handle Cstamp
stamp_st(stamp) ::= <<
<stamp.data>
>>

// handle Csymbol
symbol_st(symbol) ::= <<
<symbol.data>
>>

D3Etup_st(knd, d3es) ::= <<
(<d3es; separator=", ">)
>>

D3Cimpdec_st(cst, def) ::= <<
implement <cst> = <def>
>>

D3Cstacsts_st(scsts) ::= <<
<scsts; separator="\nand ">
>>

D3Evar_st(var, type) ::= <<
<d3var_st(var)>:<type>
>>

D3Cvaldecs_st(knd, v3ds) ::= <<
<knd> <v3ds; separator="\nand ">
>>

valkind_st(knd) ::= <<
<knd>
>>

v3aldec_st(pat, def) ::= <<
<pat> = <def>
>>

D3Eempty_st() ::= <<
()
>>













