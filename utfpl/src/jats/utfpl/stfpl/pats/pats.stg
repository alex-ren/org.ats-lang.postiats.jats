group patcsps;

// ===============================

local_temp_list() ::= <<__temp_list_args>>

sys_gstack() ::= <<sys_gstack>>

sys_tid() ::= <<sys_tid>>

sys_cur_tid() ::= <<sys_cur_tid>>
sys_sch_tid() ::= <<-1>>

sys_schedule_in() ::= <<[<sys_cur_tid()> == <sys_tid()>]>>
sys_schedule_out() ::= <<
if (<sys_glb()> == 0) {  // not atomic
  <sys_cur_tid()> = <sys_sch_tid()>;
}
>>

sys_ins_schedule_out_yes(has_effect) ::= <<
<if(has_effect)><sys_schedule_out()><else>...should not happen...<endif>
>>

sys_ins_schedule_out_no() ::= <<
<if(has_effect)>...should not happen...<endif>
>>

sys_mylib() ::= <<sys_mylib_obj>>

atom_ref_manager() ::= <<atom_ref_manager>>

array_ref_manager() ::= <<array_ref_manager>>

view_manager() ::= <<view_manager>>

sys_mutex_manager() ::= <<
sys_mutex_manager
>>

sys_cond_manager() ::= <<
sys_cond_manager
>>

sys_assert_var() ::= <<
sys_assert_var
>>

sys_tid_allocator() ::= <<
sys_tid_allocator
>>

sys_glb() ::= <<
sys_glb
>>


// ===============================

pmodel_st(scheduler_body, gvar_lst, proc_lst, main_proc_body, ext_code_lst) ::= <<

// ===============================

<!#import "PStack";!>
#import "MyLib";  // import the library

// =====================

// library data structure (e.g. tuple, list)
var\<MyLibObj> <sys_mylib()> = new MyLibObj();

// Set the initial capacity to 10.
var\<AtomRefManager> <atom_ref_manager()> = new AtomRefManager(10);

// Set the initial capacity to 10.
var\<ArrayRefManager> <array_ref_manager()> = new ArrayRefManager(10);

//
var\<ViewManager> <view_manager()> = new ViewManager();

// ====================
var <sys_cur_tid()> = 
// =====================
// For global exclusion.
var <sys_glb()> = 0;

// =====================

// Stack Operation
var\<PStack> <sys_gstack()> = new PStack();

// thread id allocator
var\<Allocator> <sys_tid_allocator()> = new Allocator();  // todo: improve

// =====================

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

<scheduler_body>;

Scheduler() = (atomic{sys_ch_sch?<sys_tid()>.fn.args ->  // It's safe to use *atomic* here.
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

sys_proc_thread_finalize(<sys_tid()>) = 
  thread_finalize.<sys_tid()>{
    <sys_gstack()>.delete_frame(<sys_tid()>); 
    sys_thread_num--;
    <sys_tid_allocator()>.release(<sys_tid()>);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var\<Allocator> <sys_mutex_manager()> = new Allocator();

// ====================
conats_mutex_acquire(<sys_tid()>) = sys_mutex_lock_impl (<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0));

sys_mutex_lock_impl(<sys_tid()>, m) = [mutex[m] == 0] mlock.<sys_tid()>{mutex[m] = 1} -> Skip;
// ====================
conats_mutex_release(<sys_tid()>) = sys_mutex_unlock_impl (<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0));

sys_mutex_unlock_impl(<sys_tid()>, m) = sys_munlock.<sys_tid()>{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var\<Allocator> <sys_cond_manager()> = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

// ====================

conats_shared_acquire(<sys_tid()>) = conats_shared_acquire_impl(<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0));
//  tup = <sys_gstack()>.frame_get(<sys_tid()>, 0, 0)
//  a = sys_mylib_obj.getTupleElement(tup, 0);
//  mutex = sys_mylib_obj.getTupleElement(tup, 1);
//  cond = sys_mylib_obj.getTupleElement(tup, 2);
conats_shared_acquire_impl(<sys_tid()>, tup) = // atomic{ // Cannot use atomic here. Otherwise it would cause higher priority.
    shared_acq.<sys_tid()>{<sys_gstack()>.frame_push(<sys_tid()>, sys_mylib_obj.getTupleElement(tup, 0))} ->
    sys_mutex_lock_impl(<sys_tid()>, sys_mylib_obj.getTupleElement(tup, 1))
    // }  // end of atomic
    ;
// ====================
conats_shared_release(<sys_tid()>) = conats_shared_release_impl(<sys_tid()>, 
                                          <sys_gstack()>.frame_get(<sys_tid()>, 0, 0),
                                          <sys_gstack()>.frame_get(<sys_tid()>, 0, 1)
                                          );
                                          
conats_shared_release_impl(<sys_tid()>, tup, a) = 
    sys_mutex_unlock_impl(<sys_tid()>, sys_mylib_obj.getTupleElement(tup, 1));
// ====================
conats_shared_signal(<sys_tid()>) = conats_shared_signal_impl(<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0), 0);
conats_sharedn_signal(<sys_tid()>) = conats_shared_signal_impl(<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0), <sys_gstack()>.frame_get(<sys_tid()>, 0, 1));

conats_shared_signal_impl(<sys_tid()>, tup, index) = 
    sys_cond_signal_impl(<sys_tid()>, sys_mylib_obj.getTupleElement(tup, index + 2));
    

sys_cond_signal_impl(<sys_tid()>, c) = atomic {if (cond_holder[c] > 0) {  // I think it's safe to keep *atomic* here.

          csub.<sys_tid()>{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};    
// ====================

conats_shared_condwait(<sys_tid()>) = 
    conats_shared_condwait_impl(<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0), 0);

conats_sharedn_condwait(<sys_tid()>) = 
    conats_shared_condwait_impl(<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0), <sys_gstack()>.frame_get(<sys_tid()>, 0, 1));
    
conats_shared_condwait_impl(<sys_tid()>, tup, index) = sys_cond_wait_impl(<sys_tid()>, 
                                  sys_mylib_obj.getTupleElement(tup, index + 2),  // cond
                                  sys_mylib_obj.getTupleElement(tup, 1));  // mutex

sys_cond_wait_impl(<sys_tid()>, c, m) = atomic{
  cadd.<sys_tid()>{cond_holder[c]++;} -> 
  sys_mutex_unlock_impl(<sys_tid()>, m); 
  cond_chan[c]?_ -> Skip }; 
  sys_mutex_lock_impl(<sys_tid()>, m)  // Cannot use atomic here. Otherwise it would cause current thread has higher priority to lock.
  ;

// ====================

conats_shared_broadcast(<sys_tid()>) = conats_shared_broadcast_impl(<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0), 0);
conats_sharedn_broadcast(<sys_tid()>) = conats_shared_broadcast_impl(<sys_tid()>, <sys_gstack()>.frame_get(<sys_tid()>, 0, 0), <sys_gstack()>.frame_get(<sys_tid()>, 0, 1));


conats_shared_broadcast_impl(<sys_tid()>, tup, index) = 
    sys_cond_broadcast_impl(<sys_tid()>, sys_mylib_obj.getTupleElement(tup, index + 2));

sys_cond_broadcast_impl(<sys_tid()>, c) = atomic{if (cond_holder[c] > 0) {  // It's safe to use *atomic* here.

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================

// #define sys_list_nil  sys_list_manager.list_nil ();
// #define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
// #define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
// #define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
// #define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// ===============================
// global variable for assertion
var <sys_assert_var()> = true;

// =====================

<gvar_lst; separator="\n">

<proc_lst; separator="\n\n">

// =====================

sys_main(<sys_tid()>) = 
  sys_main_init.<sys_tid()>{var <local_temp_list()> = <sys_mylib()>.list_nil ();
            <sys_gstack()>.add_frame(0, <local_temp_list()>); 
            } -> Skip;
  <main_proc_body>; 
  sys_proc_thread_finalize(<sys_tid()>);

var main_sys_tid = <sys_tid_allocator()>.allocate();
main = sys_main(main_sys_tid) ||| Scheduler;

#define sys_assertion <sys_assert_var()> == true;

// #assert main deadlockfree;

// #assert main |= G sys_assertion;

<ext_code_lst; separator="\n\n">


>>

scheduler_body_st(proc1_name, proc1_addr, else_procs) ::= <<
sch_thread_starter(<sys_tid()>, fn, args) =
thread_init{
  // Create a list with one element.
  var <local_temp_list()> = sys_mylib_obj.list_nil ();
  <local_temp_list()> = sys_mylib_obj.list_cons (args, <local_temp_list()>);
  <sys_gstack()>.add_frame(sys_tid, <local_temp_list()>);
} ->
<if(proc1_name)>
  if (fn == <proc1_addr>) {
    <proc1_name>(<sys_tid()>); sys_proc_thread_finalize(<sys_tid()>)
    |||
    Scheduler()
  }
  <else_procs; separator="\n">
  else {Skip}
<else>
  Skip
<endif>
>>

schedule_else_if(proc_name, proc_addr) ::= <<
else if (fn == <proc_addr>) {
  <proc_name>(<sys_tid()>); sys_proc_thread_finalize(<sys_tid()>)
  |||
  Scheduler()
}
>>


PGDecVar_st(id, init) ::= <<
var <id><if(init)> = <init><endif>;
>>

pgdecarray_st(id, sz) ::= <<
var <id>[<sz>];
>>

pprocbranch_ifcommon_st(cond, if_proc, else_proc) ::= <<
if (<cond>) {
  <if_proc>
}<if(else_proc)> else {
  <else_proc>
}<endif>
>>

pprocbranch_ifa_st(cond, if_proc, else_proc) ::= <<
ifa (<cond>) {
  <if_proc>
}<if(else_proc)> else {
  <else_proc>
}<endif>
>>

pprocbranch_ifb_st(cond, if_proc) ::= <<
ifb (<cond>) {
  <if_proc>
}
>>
  
pevent_st(tag, stat_lst) ::= <<
<sys_schedule_in()> <tag>.<sys_tid()>{  <stat_lst; separator="\n">
} -> Skip
>>

PExpFuncCall_st(is_sym, fun_lab, arg_lst) ::= <<
<if(is_sym)>call(<[fun_lab, arg_lst]; separator=", ">)<else><sys_mylib()>.<fun_lab>(<arg_lst; separator=", ">)<endif>
>>

PStatLocalVarDec_st(name, val, is_global) ::= <<
<if(name)><if(is_global)><else>var <endif><name><if(val)> = <endif><endif><if(val)><val><endif>;
>>

PStatAssignment_st(name, val) ::= <<
<if(name)><name> = <endif><val>;
>>

pprocatom_st() ::= <<
Skip
>>

pproccall_st(name) ::= <<
<name>(<sys_tid()>)
>>

pgdecproc_st(name, para_lst, body) ::= <<
<name>(<sys_tid()>) =
<!  <proc_preloge_st()> ->  !>
  <body>
  ;
>>

pprocseq_st(proc_left, proc_right) ::= <<
<proc_left>;
<proc_right>
>>

pexpstackopr_default_t(frame, pos) ::= <<
<sys_gstack()>.frame_get(<sys_tid()>, <frame>, <pos>)
>>

pexpstackopr_bool_t(frame, pos) ::= <<
<sys_gstack()>.frame_get_bool(<sys_tid()>, <frame>, <pos>)
>>

pexpstackopr_int_t(frame, pos) ::= <<
<sys_gstack()>.frame_get(<sys_tid()>, <frame>, <pos>)
>>

pprocevent_st(evt, proc) ::= <<
<evt>;
<proc>
>>

pprocchannel_st(ch, proc) ::= <<
<ch> ->
<proc>
>>

pchannelrecv_st(name, ele_lst) ::= <<
<name>?<ele_lst; separator=".">
>>

pchannelsend_st(name, msg_lst) ::= <<
<name>!<msg_lst; separator=".">
>>

pexpopr_unary_st(exp, opr) ::= <<
<opr><exp>
>>

pexpopr_binary_st(exp1, exp2, opr) ::= <<
<exp1> <opr> <exp2>
>>

pprocparallel_st(proc_lst) ::= <<
<proc_lst; separator="\n|||\n">
>>

pstatstackpush_st(name) ::= <<
<sys_gstack()>.frame_push(<sys_tid()>, <name>);
>>

pstatreturn_st(v) ::= <<
<sys_gstack()>.frame_push(<sys_tid()>, <v>);
>>

pnone_st() ::= <<
0
>>

pinscond_st(cond, trueb, falseb) ::= <<
if (<cond>) {
    <trueb; separator="\n">
} else {
    <falseb; separator="\n">
}
>>


PInsMutexCreate_st(holder, is_global, has_effect) ::= <<
<if(is_global)><else>var <endif><holder> = <sys_mutex_manager()>.allocate();
<sys_ins_schedule_out_no(has_effect)>
>>

// pinsmutexrelease_st(mutex) ::= <<
// <sys_mutex_manager()>.release(<mutex>);
// >>

pinscondalloc_st(holder, is_global) ::= <<
<if(is_global)><else>var <endif><holder> = <sys_cond_manager()>.allocate();
>>

PInsMCAssert_st(pred, has_effect) ::= <<
<sys_assert_var()> = <pred>;
<sys_ins_schedule_out_no(has_effect)>
>>

// pinscondrelease_st(cond) ::= <<
// <sys_cond_manager()>.release(<cond>);
// >>

PProcThreadCreate_st(tid, funaddr, args) ::= <<
sys_thread_create(<tid>, <funaddr>, <args>)
>>

PStatProcCallPrelogue_st(args, is_tail_call) ::= <<
var <local_temp_list()> = <sys_mylib()>.list_nil ();
<args:{arg|<local_temp_list()> = <sys_mylib()>.list_cons (<arg>, <local_temp_list()>);}; separator="\n">
<if(is_tail_call)><sys_gstack()>.reload_frame(<sys_tid()>, <local_temp_list()>);<else><sys_gstack()>.add_frame(<sys_tid()>, <local_temp_list()>);<endif>
>>

PStatProcCallEpilogue_st(is_void, ret, is_global) ::= <<
<if(is_void)><sys_gstack()>.delete_frame(<sys_tid()>);<else><if(ret)><if(is_global)><else>var <endif><ret> = <endif><sys_gstack()>.retopr_frame(<sys_tid()>);<endif>
>>

// ===================================================

PExpFormClosure_st(funaddr, envname) ::= <<
<sys_mylib()>.createTuple2(<funaddr>, <envname>)
>>

PExpPatLabDecompose_st(tup, index) ::= <<
<sys_mylib()>.getTupleElement(<tup>, <index>);
>>

PExpTupleCreate_st(len) ::= <<
<sys_mylib()>.createTuple(<len>)
>>

PInsTupleAdd_st(tupname, index, e) ::= <<
<sys_mylib()>.setTupleElement(<tupname>, <index>, <e>);
>>

PInsAtomRefCreate_st(holder, init, is_global, has_effect) ::= <<
<if(is_global)><else>var <endif><holder> = <atom_ref_manager()>.allocate(<init>);
<sys_ins_schedule_out_no(has_effect)>
>>

PInsAtomRefGet_st(holder, ref, is_global, has_effect) ::= <<
<if(is_global)><else>var <endif><holder> = <atom_ref_manager()>.getElement(<ref>);
<sys_ins_schedule_out_yes(has_effect)>
>>

PInsAtomRefUpdate_st(ref, exp, has_effect) ::= <<
<atom_ref_manager()>.setElement(<ref>, <exp>);
<sys_ins_schedule_out_yes(has_effect)>
>>


PInsArrayRefCreate_st(holder, len, init, is_global, has_effect) ::= <<
<if(is_global)><else>var <endif><holder> = <array_ref_manager()>.allocate(<len>, <init>);
<sys_ins_schedule_out_no(has_effect)>
>>

PInsArrayRefGet_st(holder, ref, pos, is_global, has_effect) ::= <<
<if(is_global)><else>var <endif><holder> = <array_ref_manager()>.getElement(<ref>, <pos>);
<sys_ins_schedule_out_yes(has_effect)>
>>

PInsArrayRefUpdate_st(ref, pos, exp, has_effect, has_effect) ::= <<
<array_ref_manager()>.setElement(<ref>, <pos>, <exp>);
<sys_ins_schedule_out_yes(has_effect)>
>>

PInsTIdAllocate_st(holder, is_global, has_effect) ::= <<
<if(is_global)><else>var <endif><holder> = <sys_tid_allocator()>.allocate();
<sys_ins_schedule_out_no(has_effect)>
>>

PInsMCSet_st(gv, v) ::= <<
<gv> = <v>;
<sys_ins_schedule_out_yes(true)>
>>

PInsMCGet_st(holder, gv) ::= <<
var <holder> = <gv>;
<sys_ins_schedule_out_yes(true)>
>>

PProcGrpMCAtomicStart_st(proc) ::= <<
ifa (<sys_glb()> == 0) {atomic { {<sys_glb()> = 1;} ->  // I think that it's safe to have atomic here, since
<proc>                                                  // there's always gonna be a non-atomic step and non-effective step before the atomic.
>>

PProcGrpMCAtomicEnd_st(proc) ::= <<
{<sys_glb()> = 0;} -> Skip } }<if(proc)>;<endif><if(proc)>
<proc><endif>
>>

PInsMCVLockViewGet_st(args, holder) ::= <<
var <holder> = <view_manager()>.get(<args; separator=", ">);
sys_assert_var = !<sys_mylib()>.is_none(<holder>);
>>

PInsMCVLockViewPut_st(v) ::= <<
<view_manager()>.put(<v>);
>>

PInsSharedCreate_st(holder, v, n, is_global, has_effect) ::= <<
var bound = <n> + 2;
<if(is_global)><else>var <endif><holder> = <sys_mylib()>.createTuple(bound);
<sys_mylib()>.setTupleElement(<holder>, 0, <v>);  // value
<sys_mylib()>.setTupleElement(<holder>, 1, <sys_mutex_manager()>.allocate());  // mutex
var index = 2;
while (index \< bound) {
    <sys_mylib()>.setTupleElement(<holder>, index, <sys_cond_manager()>.allocate());
    index = index + 1;
};
<sys_ins_schedule_out_no(has_effect)>
>>












