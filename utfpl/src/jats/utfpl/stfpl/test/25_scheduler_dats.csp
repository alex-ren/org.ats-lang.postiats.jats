// ===============================

#import "MyLib";  // import the library

// =====================

// library data structure (e.g. tuple, list)
var<MyLibObj> sys_mylib_obj = new MyLibObj();

// Set the initial capacity to 10.
var<AtomRefManager> atom_ref_manager = new AtomRefManager(10);

// Set the initial capacity to 10.
var<ArrayRefManager> array_ref_manager = new ArrayRefManager(10);

//
var<ViewManager> view_manager = new ViewManager();

// ====================
// For scheduler

// id of currrent running thread
var sys_cur_tid = 0;

// list of runable threads
var sys_runable_list;
var sys_runable_size;

sys_runable_run_random(xs, n) = 
  ifa (n == 0) {sys_end -> Skip}
  else ifa (n == 1) {
    sys_run_first_one(xs)
  }
  else {
    sys_run_first_one(xs)
    <>
    sys_runable_run_random(sys_mylib_obj.list_get_tail(xs), n - 1)
  };

var sys_show_cur_tid;

sys_run_first_one(xs) = get_cur_tid{sys_show_cur_tid = sys_mylib_obj.list_get_header(xs);} ->
  sys_run_first_one_scheduleto.sys_show_cur_tid{sys_cur_tid = sys_mylib_obj.list_get_header(xs);
  } -> 
  sys_scheduler_random
  ;

var sys_new_tid;  // indicator for creating new thread
var sys_new_fn;
var sys_new_args;

sys_scheduler_random = [sys_cur_tid == -1](
  ifa (sys_new_tid == -1) {  // schedule
    sys_runable_run_random(sys_runable_list, sys_runable_size)
  } else {  // create new thread
    sys_sch_thread_starter(sys_new_tid, sys_new_fn, sys_new_args)
  });


sys_sch_thread_starter(tid, fn, args) = sys_sch_thread_starter_s1.tid{
    sys_new_tid = -1;
    sys_runable_list =  sys_mylib_obj.list_insert_ordered(tid, sys_runable_list);
    sys_runable_size = sys_runable_size + 1;

    // Create a list with one element for stack
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (args, __temp_list_args);
    sys_gstack.add_frame(tid, __temp_list_args);

  } -> 
  Skip  // sys_sch_thread_starter

sys_thread_finalize(sys_tid) = [sys_cur_tid == sys_tid] sys_thread_finalize_s1.sys_tid{
    // finalize thread
    // remove tid
    sys_runable_list = sys_mylib_obj.list_remove_element(sys_runable_list, sys_tid);
    sys_runable_size = sys_runable_size - 1;
    sys_cur_tid = -1;  // schedule out
  } -> Skip;

sys_thread_create(sys_tid, tid, fn, args) = [sys_cur_tid == sys_tid] sys_thread_create_s1.sys_tid{
    sys_new_tid = tid;
    sys_new_fn = fn;
    sys_new_args = args;

    sys_cur_tid = -1;
  } -> Skip;

// =====================
// For global exclusion.
var sys_glb = 0;

// =====================

// Stack Operation
var<PStack> sys_gstack = new PStack();

// thread id allocator
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

// =====================

// Set the initial capacity to 10.
#define MUTEX_NO  10;
var<Allocator> sys_mutex_manager = new Allocator();

// ====================

var sys_mutex_repo = [-1(MUTEX_NO)];
var<AtomRefManager> sys_mutex_waiting_list_manager = new AtomRefManager(MUTEX_NO);

sys_init_mutex_service(n) = sys_init_mutex_service_s1{
  sys_mutex_waiting_list_manager.initialize(n, sys_mylib_obj.list_nil());
} -> Skip;

sys_mutex_acquire(sys_tid, m) = 
  ifa (sys_mutex_repo[m] == -1) {  // can have the mutex
    sys_mutex_acquire_yes.sys_tid{sys_mutex_repo[m] = sys_tid;} -> Skip
  } else {
   sys_mutex_acquire_no.sys_tid{  // cannot have the mutex
      // remove current thread from runable
      sys_runable_list = sys_mylib_obj.list_remove_element(sys_runable_list, sys_tid);
      sys_runable_size = sys_runable_size - 1;

      // add current thread to waiting list
      var __temp_list_args = 
        sys_mylib_obj.list_insert_ordered(sys_tid, sys_mutex_waiting_list_manager.getElement(m));
      sys_mutex_waiting_list_manager.setElement(m, __temp_list_args);

      sys_cur_tid = -1;  // schedule out
    } -> Skip
  }
  ;

sys_mutex_release(sys_tid, m) = 
  ifa(sys_mylib_obj.list_is_nil(sys_mutex_waiting_list_manager.getElement(m))) {
    sys_mutex_release_s1.sys_tid{
      sys_mutex_repo[m] = -1;
      sys_cur_tid = -1;  // schedule out
    } -> Skip
  } else {
    sys_mutex_release_random(sys_tid, m, sys_mutex_waiting_list_manager.getElement(m))
  }

sys_mutex_release_random(sys_tid, m, waiting_list) = 
  ifa (sys_mylib_obj.list_is_nil(sys_mylib_obj.list_get_tail(waiting_list))) {
    sys_mutex_release_random_first(sys_tid, m, sys_mylib_obj.list_get_header(waiting_list))
  } else {
    sys_mutex_release_random_first(sys_tid, m, sys_mylib_obj.list_get_header(waiting_list))
    <>
    sys_mutex_release_random(sys_tid, m, sys_mylib_obj.list_get_tail(waiting_list))
  }
  ;

sys_mutex_release_random_first(sys_tid, m, tid) = {
  // remove from waiting list
  var waiting_list = sys_mutex_waiting_list_manager.getElement(m);
  var new_list = sys_mylib_obj.list_remove_element(waiting_list, tid);
  sys_mutex_waiting_list_manager.setElement(m, new_list);

  sys_mutex_repo[m] = tid;

  // add to runable
  sys_runable_list = sys_mylib_obj.list_insert_ordered(tid, sys_runable_list);
  sys_runable_size = sys_runable_size + 1;

  sys_cur_tid = -1;  // schedule out
  } -> Skip;

// ====================

conats_mutex_acquire(sys_tid) = 
  [sys_cur_tid == sys_tid] 
  sys_mutex_acquire(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

conats_mutex_release(sys_tid) = 
  [sys_cur_tid == sys_tid] 
  sys_mutex_release (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

// =================================
// Set the initial capacity to 10.
#define COND_NO  10;
var<Allocator> sys_cond_manager = new Allocator();

// ======================

var sys_cond_repo = [0(COND_NO)];
var<AtomRefManager> sys_cond_sleep_list_manager = new AtomRefManager(COND_NO);

// ======================

sys_init_cond_service(n) = sys_init_cond_service_s1{
  sys_cond_sleep_list_manager.initialize(n, sys_mylib_obj.list_nil());
} -> Skip;


sys_cond_signal(sys_tid, c, m) = 
  ifa(sys_mylib_obj.list_is_nil(sys_cond_sleep_list_manager.getElement(c))) {
    sys_cond_signal_empty.sys_tid -> Skip
  } else {
    sys_cond_signal_random(sys_tid, c, sys_cond_sleep_list_manager.getElement(c))
  }

sys_cond_signal_random(sys_tid, c, sleep_list) = 
  ifa (sys_mylib_obj.list_is_nil(sys_mylib_obj.list_get_tail(sleep_list))) {
    sys_cond_signal_random_first(sys_tid, c, sys_mylib_obj.list_get_header(sleep_list))
  } else {
    sys_cond_signal_random_first(sys_tid, c, sys_mylib_obj.list_get_header(sleep_list))
    <>
    sys_cond_signal_random(sys_tid, c, sys_mylib_obj.list_get_tail(sleep_list))
  }
  ;

sys_cond_signal_random_first(sys_tid, c, tid) = sys_cond_signal_random_first_s1.sys_tid{
  // remove from sleep list
  var sleep_list = sys_cond_sleep_list_manager.getElement(c);
  var new_list = sys_mylib_obj.list_remove_element(sleep_list, tid);
  sys_cond_sleep_list_manager.setElement(c, new_list);

  // add to runable
  sys_runable_list = sys_mylib_obj.list_insert_ordered(tid, sys_runable_list);
  sys_runable_size = sys_runable_size + 1;
  } -> Skip;

sys_cond_wait(sys_tid, c, m) = sys_cond_wait_s1.sys_tid{
  // remove from runable
  sys_runable_list = sys_mylib_obj.list_remove_element(sys_runable_list, sys_tid);
  sys_runable_size = sys_runable_size - 1;
  // add to sleep
  var new_list = sys_mylib_obj.list_insert_ordered(sys_tid, sys_cond_sleep_list_manager.getElement(c));
  sys_cond_sleep_list_manager.setElement(c, new_list);
  } -> Skip;
  // release mutex. This would cause schedule out
  sys_mutex_release(sys_tid, m);
  [sys_cur_tid == sys_tid]  // schedule in
  sys_mutex_acquire(sys_tid, m);

sys_cond_broadcast(sys_tid, c) = sys_cond_broadcast_s1{
  var sleep_list = sys_cond_sleep_list_manager.getElement(c);
  sys_runable_list = sys_mylib_obj.list_merge_ordered(sys_runable_list, sleep_list);
  sys_runable_size = sys_runable_size + sys_mylib_obj.list_length(sleep_list);
  sys_cond_sleep_list_manager.setElement(c, sys_mylib_obj.list_nil());
  } -> Skip;

// ======================

conats_shared_acquire(sys_tid) = 
  [sys_cur_tid == sys_tid]
  conats_shared_acquire_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

//  tup = sys_gstack.frame_get(sys_tid, 0, 0)
//  a = sys_mylib_obj.getTupleElement(tup, 0);
//  mutex = sys_mylib_obj.getTupleElement(tup, 1);
//  cond = sys_mylib_obj.getTupleElement(tup, 2);
conats_shared_acquire_impl(sys_tid, tup) =
    conats_shared_acquire_impl_s1.sys_tid{
      sys_gstack.frame_push(sys_tid, sys_mylib_obj.getTupleElement(tup, 0))  // return a
    } ->
    sys_mutex_acquire(sys_tid, sys_mylib_obj.getTupleElement(tup, 1))
    ;

// ====================

conats_shared_release(sys_tid) = 
  [sys_cur_tid == sys_tid] 
  conats_shared_release_impl(sys_tid, 
                             sys_gstack.frame_get(sys_tid, 0, 0),
                             sys_gstack.frame_get(sys_tid, 0, 1)
                            );

conats_shared_release_impl(sys_tid, tup, a) = 
  sys_mutex_release(sys_tid, sys_mylib_obj.getTupleElement(tup, 1));

// ====================

conats_shared_signal(sys_tid) = 
  [sys_cur_tid == sys_tid]
  conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);


conats_sharedn_signal(sys_tid) = 
  [sys_cur_tid == sys_tid]
  conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 
                                            sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_signal_impl(sys_tid, tup, index) = sys_cond_signal(sys_tid, 
                                  sys_mylib_obj.getTupleElement(tup, index + 2),  // cond
                                  sys_mylib_obj.getTupleElement(tup, 1));  // mutex

// ====================

conats_shared_condwait(sys_tid) = 
  [sys_cur_tid == sys_tid]
  conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);

conats_sharedn_condwait(sys_tid) = 
  [sys_cur_tid == sys_tid]
  conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 
                                              sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_condwait_impl(sys_tid, tup, index) = sys_cond_wait(sys_tid, 
                                  sys_mylib_obj.getTupleElement(tup, index + 2),  // cond
                                  sys_mylib_obj.getTupleElement(tup, 1));  // mutex

// ====================

conats_shared_broadcast(sys_tid) = 
  [sys_cur_tid == sys_tid]
  conats_shared_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);

conats_sharedn_broadcast(sys_tid) = 
  [sys_cur_tid == sys_tid]
  conats_shared_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 
                                               sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_broadcast_impl(sys_tid, tup, index) = 
    sys_cond_broadcast(sys_tid, sys_mylib_obj.getTupleElement(tup, index + 2));

// ===============================
// global variable for assertion
var sys_assert_var = true;

// =====================


foo2_63(sys_tid) =
  [sys_cur_tid == sys_tid] foo2_63_s1.sys_tid{  sys_gstack.frame_push(sys_tid, sys_gstack.frame_get(sys_tid, 0, 1));
  } -> Skip;
  Skip
  ;

foo_66(sys_tid) =
  [sys_cur_tid == sys_tid] foo_66_s1.sys_tid{  var x_68 = sys_mylib_obj.list_is_nil(sys_gstack.frame_get(sys_tid, 0, 0));
  var y_69 = sys_mylib_obj.list_get_header(sys_gstack.frame_get(sys_tid, 0, 0));
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (2, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (3, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } -> Skip;
  foo2_63(sys_tid);
  [sys_cur_tid == sys_tid] foo_66_s2.sys_tid{  var x_70 = sys_gstack.retopr_frame(sys_tid);
  } -> Skip;
  Skip
  ;

// =====================

sys_main(sys_tid) = [sys_cur_tid == sys_tid]
  sys_main_init.sys_tid{var __temp_list_args = sys_mylib_obj.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } -> Skip;
  Skip; 
  sys_thread_finalize(sys_tid);

var main_sys_tid = sys_tid_allocator.allocate();
main = 
  sys_init_mutex_service(MUTEX_NO);
  sys_init_cond_service(COND_NO);
  main_init_scheduler {  // initialize runable
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_insert_ordered(main_sys_tid, __temp_list_args);
  sys_runable_list = __temp_list_args;
  sys_runable_size = 1;
  sys_cur_tid = main_sys_tid;

  sys_new_tid = -1;  // -1: not creating new thread
  } -> (sys_main(main_sys_tid) ||| sys_scheduler_random);

#define sys_assertion sys_assert_var == true;

// #assert main deadlockfree;

// #assert main |= G sys_assertion;


// =================================
// Set the initial capacity to 10.

var cond2 = [0(COND_NO)];
var<AtomRefManager> cond_sleep_list_manager = new AtomRefManager(COND_NO);

InitCond2(n) = InitCond_s1{
  cond_sleep_list_manager.initialize(n, sys_mylib_obj.list_nil());
} -> Skip;


CondSignal(sys_tid, c) = 
  ifa(sys_mylib_obj.list_is_nil(cond_sleep_list_manager.getElement(c))) {
    CondSignal_empty.sys_tid -> Skip
  } else {
    CondSignalRandom(sys_tid, c, cond_sleep_list_manager.getElement(c))
  }

CondSignalRandom(sys_tid, c, sleep_list) = 
  ifa (sys_mylib_obj.list_is_nil(sys_mylib_obj.list_get_tail(sleep_list))) {
    CondSignalRandom_first(sys_tid, c, sys_mylib_obj.list_get_header(sleep_list))
  } else {
    CondSignalRandom_first(sys_tid, c, sys_mylib_obj.list_get_header(sleep_list))
    <>
    CondSignalRandom(sys_tid, c, sys_mylib_obj.list_get_tail(sleep_list))
  }
  ;
  
CondSignalRandom_first(sys_tid, c, tid) = CondSignalRandom_first_s1.sys_tid{
  // remove from sleep list
  var sleep_list = cond_sleep_list_manager.getElement(c);
  var new_list = sys_mylib_obj.list_remove_element(sleep_list, tid);
  cond_sleep_list_manager.setElement(c, new_list);
  
  // add to runable
  runable = sys_mylib_obj.list_cons(tid, runable);
  runable_size = runable_size + 1;
  } -> Skip;


CondBroadcast(sys_tid, c) = CondBroadcast_s1{
  var sleep_list = cond_sleep_list_manager.getElement(c);
  runable = sys_mylib_obj.list_revappend(runable, sleep_list);
  runable_size = runable_size + sys_mylib_obj.list_length(sleep_list);
  cond_sleep_list_manager.setElement(c, sys_mylib_obj.list_nil());
  } -> Skip;

CondWait(sys_tid, c, m) = CondWait_st.sys_tid{
  // remove from runable
  runable = sys_mylib_obj.list_remove_element(runable, sys_tid);
  runable_size = runable_size - 1;
  // add to sleep
  var new_list = sys_mylib_obj.list_cons(sys_tid, cond_sleep_list_manager.getElement(c));
  cond_sleep_list_manager.setElement(c, new_list);
  } -> Skip;
  // release mutex. This would cause schedule out
  MutexRelease(sys_tid, m);
  MutexAcquire(sys_tid, m);



// =================================

// Set the initial capacity to 10.

var mutex2 = [-1(MUTEX_NO)];
var<AtomRefManager> mutex_waiting_list_manager = new AtomRefManager(MUTEX_NO);

InitMutex2(n) = InitMutex_s1{
  mutex_waiting_list_manager.initialize(n, sys_mylib_obj.list_nil());
} -> Skip;

MutexAcquire(sys_tid, m) =
  ifa (mutex2[m] == -1) {  // can have the mutex
    MutexAcquire_yes.sys_tid{mutex2[m] = sys_tid;} -> Skip
  } else {
    MutexAcquire_no.sys_tid{  // cannot have the mutex
      // remove current thread from runable
      runable = sys_mylib_obj.list_remove_element(runable, sys_tid);
      runable_size = runable_size - 1;
      
      // add current thread to waiting list
      var new_list = sys_mylib_obj.list_cons(sys_tid, mutex_waiting_list_manager.getElement(m));
      mutex_waiting_list_manager.setElement(m, new_list);
      
      cur_tid = -1;  // schedule out
    } -> ([cur_tid == sys_tid] Skip)  // schedule in
  }
  ;

MutexRelease(sys_tid, m) = 
  ifa(sys_mylib_obj.list_is_nil(mutex_waiting_list_manager.getElement(m))) {
    MutexRelease_s1.sys_tid{
      mutex2[m] = -1;
      cur_tid = -1;  // schedule out
    } -> ([sys_tid == cur_tid] Skip)  // schedule in
  } else {
    MutexReleaseRandom(sys_tid, m, mutex_waiting_list_manager.getElement(m))
  }

MutexReleaseRandom(sys_tid, m, waiting_list) = 
  ifa (sys_mylib_obj.list_is_nil(sys_mylib_obj.list_get_tail(waiting_list))) {
    MutexReleaseRandom_first(sys_tid, m, sys_mylib_obj.list_get_header(waiting_list))
  } else {
    MutexReleaseRandom_first(sys_tid, m, sys_mylib_obj.list_get_header(waiting_list))
    <>
    MutexReleaseRandom(sys_tid, m, sys_mylib_obj.list_get_tail(waiting_list))
  }
  ;
  
MutexReleaseRandom_first(sys_tid, m, tid) = {
  // remove from waiting list
  var waiting_list = mutex_waiting_list_manager.getElement(m);
  var new_list = sys_mylib_obj.list_remove_element(waiting_list, tid);
  mutex_waiting_list_manager.setElement(m, new_list);
  
  mutex2[m] = tid;
  
  // add to runable
  runable = sys_mylib_obj.list_cons(tid, runable);
  runable_size = runable_size + 1;
  
  cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == sys_tid] Skip;  // Schedule in
  
// =================================
// Scheduler

// id of currrent running thread
var cur_tid = 0;

// list of runable threads
var runable;
var runable_size;


runable_get_random(xs, n) = 
  ifa (n == 0) {Skip}
  else ifa (n == 1) {
    run_first_one(xs)
  }
  else {
    run_first_one(xs)
    <>
    runable_get_random(sys_mylib_obj.list_get_tail(xs), n - 1)
  };
  
run_first_one(xs) = 
  run_first_one_s1{cur_tid = sys_mylib_obj.list_get_header(xs);
  } -> 
  scheduler_random
  ;

var new_tid = -1;  // indicator for creating new thread
var new_fn;
var new_args;

scheduler_random = [cur_tid == -1](
  ifa (new_tid == -1) {  // schedule
    runable_get_random(runable, runable_size)
  } else {  // create new thread
    sch_thread_starter2(new_tid, new_fn, new_args)
  });
  
sch_thread_starter2(tid, fn, args) = sch_thread_starter2_s1{
    new_tid = -1;
    runable =  sys_mylib_obj.list_cons(tid, runable);
    runable_size = runable_size + 1;
  } -> ifa (fn == 1) {
    ([cur_tid == tid]P1(tid, args);thread_finalize2(tid)) ||| scheduler_random
  } else ifa (fn == 2) {
    ([cur_tid == tid]P2(tid, args);thread_finalize2(tid)) ||| scheduler_random
  } else ifa (fn == 3) {
    ([cur_tid == tid]P3(tid, args);thread_finalize2(tid)) ||| scheduler_random
  } else ifa (fn == 4) {
    ([cur_tid == tid]P4(tid, args);thread_finalize2(tid)) ||| scheduler_random
  }
  else {
    Stop
  };
  
thread_finalize2(sys_tid) = thread_finalize2_s1.sys_tid{
    // finalize thread
    // remove tid
    runable = sys_mylib_obj.list_remove_element(runable, sys_tid);
    runable_size = runable_size - 1;
    cur_tid = -1;  // schedule out
  } -> Skip;

thread_create(sys_tid, tid, fn, args) = thread_create_s1.sys_tid{
    new_tid = tid;
    new_fn = fn;
    new_args = args;
  
    cur_tid = -1;
  } -> ([cur_tid == sys_tid] Skip);

// ===================================

var gx = 0;

P1(sys_tid, args) = p1_s1.sys_tid{
    gx = 1;
    cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == sys_tid] p1_s2.sys_tid{  // schedule in
    gx = 2;
  } -> 
  MutexAcquire(sys_tid, args);
  MutexRelease(sys_tid, args);
  p1_s3.sys_tid{ var x = 5;
  } -> 
  Skip;
  
P2(sys_tid, args) = p2_s1.sys_tid{
    gx = 3;
    cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == sys_tid] p2_s2.sys_tid{  // schedule in
    gx = 4;
    cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == sys_tid] Skip;// schedule in
  MutexAcquire(sys_tid, args);
  MutexRelease(sys_tid, args);

var P3_x = 0;
P3(sys_tid, args) = p3_s1.sys_tid{
    gx = 1;
  } -> Skip;
  MutexAcquire(sys_tid, args);
  {P3_x = 1;} ->
  CondWait(sys_tid, args, args);
  MutexRelease(sys_tid, args);

P4(sys_tid, args) = p4_s1.sys_tid{
    gx = 2;
  } -> Skip;
  MutexAcquire(sys_tid, args);
  CondSignal(sys_tid, args);
  MutexRelease(sys_tid, args);

Main2 = 
  InitMutex2(MUTEX_NO);  // initialize mutex
  InitCond2(COND_NO);
  main_s1.0{
  var xs = sys_mylib_obj.list_nil ();
  xs = sys_mylib_obj.list_cons (0, xs);
  runable = xs;
  runable_size = 1;
  cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == 0] Skip;  // schedule in
  // sys_tid, tid, fn, args
  // thread_create(0, 1, 1, 0);
  // thread_create(0, 2, 2, 0);
  // thread_create(0, 3, 2, 0);
  
  thread_create(0, 4, 3, 0);
  Main2_loop(0);
  thread_create(0, 5, 4, 0);
  thread_finalize2(0);  
  
  
Main2_loop(sys_tid) = ifa (P3_x == 1) {
  Skip
  } else {
    {cur_tid = -1;} -> ([cur_tid == sys_tid] Main2_loop(sys_tid))
  }
  ;
  
main2 = Main2 ||| scheduler_random;
  
#assert main2 deadlockfree;

// #assert main |= G sys_assertion;



