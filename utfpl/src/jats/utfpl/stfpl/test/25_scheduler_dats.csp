// ===============================

#import "MyLib";  // import the library

// =====================

// library data structure (e.g. tuple, list)
var<MyLibObj> sys_mylib_obj = new MyLibObj();

// Set the initial capacity to 10.
var<AtomRefManager> atom_ref_manager = new AtomRefManager(10);

// Set the initial capacity to 10.
var<ArrayRefManager> array_ref_manager = new ArrayRefManager(10);

//
var<ViewManager> view_manager = new ViewManager();

// =====================
// For global exclusion.
var glb = 0;

// =====================

// Stack Operation
var<PStack> sys_gstack = new PStack();

// thread id allocator
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

// =====================

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

sch_thread_starter(sys_tid, fn, args) =
thread_init{
  // Create a list with one element.
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (args, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
} ->
  Skip
;

Scheduler() = (atomic{sys_ch_sch?sys_tid.fn.args ->  // It's safe to use *atomic* here.
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(sys_tid) = 
  thread_finalize.sys_tid{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<Allocator> sys_mutex_manager = new Allocator();

// ====================
conats_mutex_acquire(sys_tid) = sys_mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock.sys_tid{mutex[m] = 1} -> Skip;
// ====================
conats_mutex_release(sys_tid) = sys_mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_unlock_impl(sys_tid, m) = sys_munlock.sys_tid{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<Allocator> sys_cond_manager = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

// ====================

conats_shared_acquire(sys_tid) = conats_shared_acquire_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));
//  tup = sys_gstack.frame_get(sys_tid, 0, 0)
//  a = sys_mylib_obj.getTupleElement(tup, 0);
//  mutex = sys_mylib_obj.getTupleElement(tup, 1);
//  cond = sys_mylib_obj.getTupleElement(tup, 2);
conats_shared_acquire_impl(sys_tid, tup) = // atomic{ // Cannot use atomic here. Otherwise it would cause higher priority.
    shared_acq.sys_tid{sys_gstack.frame_push(sys_tid, sys_mylib_obj.getTupleElement(tup, 0))} ->
    sys_mutex_lock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1))
    // }  // end of atomic
    ;
// ====================
conats_shared_release(sys_tid) = conats_shared_release_impl(sys_tid, 
                                          sys_gstack.frame_get(sys_tid, 0, 0),
                                          sys_gstack.frame_get(sys_tid, 0, 1)
                                          );

conats_shared_release_impl(sys_tid, tup, a) = 
    sys_mutex_unlock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1));
// ====================
conats_shared_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);
conats_sharedn_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_signal_impl(sys_tid, tup, index) = 
    sys_cond_signal_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, index + 2));

sys_cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {  // I think it's safe to keep *atomic* here.

          csub.sys_tid{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};    
// ====================

conats_shared_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);

conats_sharedn_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_condwait_impl(sys_tid, tup, index) = sys_cond_wait_impl(sys_tid, 
                                  sys_mylib_obj.getTupleElement(tup, index + 2),  // cond
                                  sys_mylib_obj.getTupleElement(tup, 1));  // mutex

sys_cond_wait_impl(sys_tid, c, m) = atomic{
  cadd.sys_tid{cond_holder[c]++;} -> 
  sys_mutex_unlock_impl(sys_tid, m); 
  cond_chan[c]?_ -> Skip }; 
  sys_mutex_lock_impl(sys_tid, m)  // Cannot use atomic here. Otherwise it would cause current thread has higher priority to lock.
  ;

// ====================

conats_shared_broadcast(sys_tid) = conats_shared_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);
conats_sharedn_broadcast(sys_tid) = conats_shared_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));


conats_shared_broadcast_impl(sys_tid, tup, index) = 
    sys_cond_broadcast_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, index + 2));

sys_cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {  // It's safe to use *atomic* here.

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================

// #define sys_list_nil  sys_list_manager.list_nil ();
// #define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
// #define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
// #define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
// #define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// ===============================
// global variable for assertion
var sys_assert_var = true;

// =====================


foo2_63(sys_tid) =
  foo2_63_s1.sys_tid{  sys_gstack.frame_push(sys_tid, sys_gstack.frame_get(sys_tid, 0, 1));
  } ->
  Skip
  ;

foo_66(sys_tid) =
  foo_66_s1.sys_tid{  var x_68 = sys_mylib_obj.list_is_nil(sys_gstack.frame_get(sys_tid, 0, 0));
  var y_69 = sys_mylib_obj.list_get_header(sys_gstack.frame_get(sys_tid, 0, 0));
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (2, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (3, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  foo2_63(sys_tid);
  foo_66_s2.sys_tid{  var x_70 = sys_gstack.retopr_frame(sys_tid);
  } ->
  Skip
  ;

// =====================

main_s(sys_tid) = 
  main_init.sys_tid{var __temp_list_args = sys_mylib_obj.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } ->
  Skip; 
  proc_thread_finalize(sys_tid);

main = main_s(sys_tid_allocator.allocate()) ||| Scheduler;

#define sys_assertion sys_assert_var == true;

// #assert main deadlockfree;

// #assert main |= G sys_assertion;



// id of currrent running thread
var cur_tid = 0;

// list of runable threads
var runable;
var runable_size;


runable_get_random(xs, n) = 
  if (n == 0) {Skip}
  else if (n == 1) {
    run_first_one(xs)
  }
  else {
    run_first_one(xs)
    <>
    runable_get_random(sys_mylib_obj.list_get_tail(xs), n - 1)
  };
  
run_first_one(xs) = 
  {cur_tid = sys_mylib_obj.list_get_header(xs);
  } -> 
  scheduler_random
  ;

scheduler_random = [cur_tid == -1] runable_get_random(runable, runable_size);


var gx = 0;

P(sid) = {
    gx = 1;
    cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == sid] {  // schedule in
    gx = 2;
  } -> 
  P2(sid); 
  { var x = 5;
  } -> 
  Skip;
  
P2(sid) = {
    gx = 3;
    cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == sid] {  // schedule in
    gx = 4;
    cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == sid] // schedule in
  Skip;

Main2 = {
  var xs = sys_mylib_obj.list_nil ();
  xs = sys_mylib_obj.list_cons (0, xs);
  runable = xs;
  runable_size = 1;
  cur_tid = -1;  // schedule out
  } -> Skip;
  [cur_tid == 0] P(0);  // schedule in
  {
    // finalize thread
    // remove tid
    runable = sys_mylib_obj.list_remove_element(runable, 0);
    runable_size = sys_mylib_obj.list_length(runable);
    
    
    cur_tid = -1;  // schedule out
  } -> Skip
  ;
  
main2 = Main2 ||| scheduler_random;
  
#assert main2 deadlockfree;

// #assert main |= G sys_assertion;




