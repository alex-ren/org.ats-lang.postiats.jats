// ===============================

#import "MyLib";  // import the library

// =====================

// library data structure (e.g. tuple, list)
var<MyLibObj> sys_mylib_obj = new MyLibObj();

// Set the initial capacity to 10.
var<AtomRefManager> atom_ref_manager = new AtomRefManager(10);

// Set the initial capacity to 10.
var<ArrayRefManager> array_ref_manager = new ArrayRefManager(10);

// =====================

// Stack Operation
var<PStack> sys_gstack = new PStack();

// thread id allocator
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

// =====================

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

sch_thread_starter(sys_tid, fn, args) =
thread_init{
  // Create a list with one element.
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (args, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
} ->
  if (fn == 2) {
    producer_65(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else if (fn == 4) {
    consumer_71(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else {Skip}
;

Scheduler() = (atomic{sys_ch_sch?sys_tid.fn.args -> 
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(sys_tid) = 
  thread_finalize{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<Allocator> sys_mutex_manager = new Allocator();

// ====================
conats_mutex_acquire(sys_tid) = sys_mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;
// ====================
conats_mutex_release(sys_tid) = sys_mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_unlock_impl(sys_tid, m) = sys_munlock{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<Allocator> sys_cond_manager = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

// ====================

conats_shared_acquire(sys_tid) = conats_shared_acquire_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));
//  tup = sys_gstack.frame_get(sys_tid, 0, 0)
//  a = sys_mylib_obj.getTupleElement(tup, 0);
//  mutex = sys_mylib_obj.getTupleElement(tup, 1);
//  cond = sys_mylib_obj.getTupleElement(tup, 2);
conats_shared_acquire_impl(sys_tid, tup) = atomic{
    {sys_gstack.frame_push(sys_tid, sys_mylib_obj.getTupleElement(tup, 0))} ->
    sys_mutex_lock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1))
    };
// ====================
conats_shared_release(sys_tid) = conats_shared_release_impl(sys_tid, 
                                          sys_gstack.frame_get(sys_tid, 0, 0),
                                          sys_gstack.frame_get(sys_tid, 0, 1)
                                          );

conats_shared_release_impl(sys_tid, tup, a) = 
    sys_mutex_unlock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1));
// ====================
conats_shared_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

conats_shared_signal_impl(sys_tid, tup) = 
    sys_cond_signal_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 2));

sys_cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};    
// ====================

conats_shared_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

conats_shared_condwait_impl(sys_tid, tup) = sys_cond_wait_impl(sys_tid, 
                                  sys_mylib_obj.getTupleElement(tup, 2),  // cond
                                  sys_mylib_obj.getTupleElement(tup, 1));  // mutex

sys_cond_wait_impl(sys_tid, c, m) = atomic{
  cadd{cond_holder[c]++;} -> 
  sys_mutex_unlock_impl(sys_tid, m); 
  cond_chan[c]?_ -> 
  sys_mutex_lock_impl(sys_tid, m)
  };

// ====================
sys_cond_broadcast(sys_tid) = sys_cond_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================

// #define sys_list_nil  sys_list_manager.list_nil ();
// #define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
// #define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
// #define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
// #define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// ===============================
// global variable for assertion
var sys_assert_var = true;

// =====================

var gref_63;
var s_64;
var tid1_77;
var tid2_78;

loop_68(sys_tid) =
  loop_68__1{  var loop_clo23_id = sys_mylib_obj.createTuple2(1, sys_gstack.frame_get(sys_tid, 0, 0));
  var x_6624_id = sys_mylib_obj.getTupleElement(sys_gstack.frame_get(sys_tid, 0, 0), 0);;
  sys_gstack.frame_push(sys_tid, x_6624_id);
  var ref_6725_id = sys_mylib_obj.getTupleElement(sys_gstack.frame_get(sys_tid, 0, 0), 1);;
  sys_gstack.frame_push(sys_tid, ref_6725_id);
  var temp5_id = atom_ref_manager.getElement(ref_6725_id);
  sys_gstack.frame_push(sys_tid, temp5_id);
  } ->
  loop_68__2{  var temp6_id = call(eq, sys_gstack.frame_get(sys_tid, 0, 3), 1);
  sys_gstack.frame_push(sys_tid, temp6_id);
  } ->
  if (sys_gstack.frame_get_bool(sys_tid, 0, 4)) {
    loop_68__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_64, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_condwait(sys_tid);
    loop_68__2{  var ref_69 = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_68(sys_tid)
  } else {
    loop_68__1{  var temp36_id = atom_ref_manager.getElement(sys_gstack.frame_get(sys_tid, 0, 2));
    sys_gstack.frame_push(sys_tid, temp36_id);
    } ->
    loop_68__2{  var temp37_id = call(add, sys_gstack.frame_get(sys_tid, 0, 5), 1);
    atom_ref_manager.setElement(sys_gstack.frame_get(sys_tid, 0, 2), temp37_id)
    } ->
    loop_68__3{  var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_64, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_signal(sys_tid);
    loop_68__4{  var ref38_id = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_64, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (ref38_id, __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_release(sys_tid);
    loop_68__5{  sys_gstack.delete_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    producer_65(sys_tid)
  }
  ;

producer_65(sys_tid) =
  producer_65__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (s_64, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  conats_shared_acquire(sys_tid);
  producer_65__2{  var ref_67 = sys_gstack.retopr_frame(sys_tid);
  var env27_id = sys_mylib_obj.createTuple(2);
  sys_mylib_obj.setTupleElement(env27_id, 0, sys_gstack.frame_get(sys_tid, 0, 0));
  sys_mylib_obj.setTupleElement(env27_id, 1, ref_67);
  var loop_closure28_id = sys_mylib_obj.createTuple2(1, env27_id);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (env27_id, __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_68(sys_tid)
  ;

loop_74(sys_tid) =
  loop_74__1{  var loop_clo30_id = sys_mylib_obj.createTuple2(3, sys_gstack.frame_get(sys_tid, 0, 0));
  var x_7231_id = sys_mylib_obj.getTupleElement(sys_gstack.frame_get(sys_tid, 0, 0), 0);;
  sys_gstack.frame_push(sys_tid, x_7231_id);
  var ref_7332_id = sys_mylib_obj.getTupleElement(sys_gstack.frame_get(sys_tid, 0, 0), 1);;
  sys_gstack.frame_push(sys_tid, ref_7332_id);
  var temp14_id = atom_ref_manager.getElement(ref_7332_id);
  sys_gstack.frame_push(sys_tid, temp14_id);
  } ->
  loop_74__2{  var temp15_id = call(eq, sys_gstack.frame_get(sys_tid, 0, 3), 0);
  sys_gstack.frame_push(sys_tid, temp15_id);
  } ->
  if (sys_gstack.frame_get_bool(sys_tid, 0, 4)) {
    loop_74__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_64, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_condwait(sys_tid);
    loop_74__2{  var ref_75 = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_74(sys_tid)
  } else {
    loop_74__1{  var temp41_id = atom_ref_manager.getElement(sys_gstack.frame_get(sys_tid, 0, 2));
    sys_gstack.frame_push(sys_tid, temp41_id);
    } ->
    loop_74__2{  var temp42_id = call(sub, sys_gstack.frame_get(sys_tid, 0, 5), 1);
    atom_ref_manager.setElement(sys_gstack.frame_get(sys_tid, 0, 2), temp42_id)
    } ->
    loop_74__3{  var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_64, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_signal(sys_tid);
    loop_74__4{  var ref43_id = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_64, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (ref43_id, __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_release(sys_tid);
    loop_74__5{  sys_gstack.delete_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    consumer_71(sys_tid)
  }
  ;

consumer_71(sys_tid) =
  consumer_71__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (s_64, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  conats_shared_acquire(sys_tid);
  consumer_71__2{  var ref_73 = sys_gstack.retopr_frame(sys_tid);
  var env34_id = sys_mylib_obj.createTuple(2);
  sys_mylib_obj.setTupleElement(env34_id, 0, sys_gstack.frame_get(sys_tid, 0, 0));
  sys_mylib_obj.setTupleElement(env34_id, 1, ref_73);
  var loop_closure35_id = sys_mylib_obj.createTuple2(3, env34_id);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (env34_id, __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_74(sys_tid)
  ;

// =====================

main_s(sys_tid) = 
  main_init{var __temp_list_args = sys_mylib_obj.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } ->
  main46_id__1{  gref_63 = atom_ref_manager.allocate(0);
  } ->
  main46_id__2{  var mutex47_id = sys_mutex_manager.allocate();
  var cond48_id = sys_cond_manager.allocate();
  s_64 = sys_mylib_obj.createTuple(3);
  sys_mylib_obj.setTupleElement(s_64, 0, gref_63);
  sys_mylib_obj.setTupleElement(s_64, 1, mutex47_id);
  sys_mylib_obj.setTupleElement(s_64, 2, cond48_id);
  tid1_77 = sys_tid_allocator.allocate();
  } ->
  main46_id__3{  tid2_78 = sys_tid_allocator.allocate();
  } ->
  sys_thread_create(tid1_77, 2, 0);
  sys_thread_create(tid2_78, 4, 0); 
  proc_thread_finalize(sys_tid);

main = main_s(sys_tid_allocator.allocate()) ||| Scheduler;

#define sys_assertion sys_assert_var == true;

#assert main deadlockfree;

#assert main |= G sys_assertion;


