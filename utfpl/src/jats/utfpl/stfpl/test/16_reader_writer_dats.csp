// ===============================

#import "MyLib";  // import the library

// =====================

// library data structure (e.g. tuple, list)
var<MyLibObj> sys_mylib_obj = new MyLibObj();

// Set the initial capacity to 10.
var<AtomRefManager> atom_ref_manager = new AtomRefManager(10);

// Set the initial capacity to 10.
var<ArrayRefManager> array_ref_manager = new ArrayRefManager(10);

//
var<ViewManager> view_manager = new ViewManager();

// =====================
// For global exclusion.
var glb = 0;

// =====================

// Stack Operation
var<PStack> sys_gstack = new PStack();

// thread id allocator
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

// =====================

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

sch_thread_starter(sys_tid, fn, args) =
thread_init{
  // Create a list with one element.
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (args, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
} ->
  if (fn == 5) {
    producer_79(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else if (fn == 7) {
    consumer_91(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else {Skip}
;

Scheduler() = (atomic{sys_ch_sch?sys_tid.fn.args -> 
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(sys_tid) = 
  thread_finalize{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<Allocator> sys_mutex_manager = new Allocator();

// ====================
conats_mutex_acquire(sys_tid) = sys_mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;
// ====================
conats_mutex_release(sys_tid) = sys_mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_unlock_impl(sys_tid, m) = sys_munlock{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<Allocator> sys_cond_manager = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

// ====================

conats_shared_acquire(sys_tid) = conats_shared_acquire_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));
//  tup = sys_gstack.frame_get(sys_tid, 0, 0)
//  a = sys_mylib_obj.getTupleElement(tup, 0);
//  mutex = sys_mylib_obj.getTupleElement(tup, 1);
//  cond = sys_mylib_obj.getTupleElement(tup, 2);
conats_shared_acquire_impl(sys_tid, tup) = atomic{
    {sys_gstack.frame_push(sys_tid, sys_mylib_obj.getTupleElement(tup, 0))} ->
    sys_mutex_lock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1))
    };
// ====================
conats_shared_release(sys_tid) = conats_shared_release_impl(sys_tid, 
                                          sys_gstack.frame_get(sys_tid, 0, 0),
                                          sys_gstack.frame_get(sys_tid, 0, 1)
                                          );

conats_shared_release_impl(sys_tid, tup, a) = 
    sys_mutex_unlock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1));
// ====================
conats_shared_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);
conats_sharedn_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_signal_impl(sys_tid, tup, index) = 
    sys_cond_signal_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, index + 2));

sys_cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};    
// ====================

conats_shared_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);

conats_sharedn_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_condwait_impl(sys_tid, tup, index) = sys_cond_wait_impl(sys_tid, 
                                  sys_mylib_obj.getTupleElement(tup, index + 2),  // cond
                                  sys_mylib_obj.getTupleElement(tup, 1));  // mutex

sys_cond_wait_impl(sys_tid, c, m) = atomic{
  cadd{cond_holder[c]++;} -> 
  sys_mutex_unlock_impl(sys_tid, m); 
  cond_chan[c]?_ -> 
  sys_mutex_lock_impl(sys_tid, m)
  };

// ====================
sys_cond_broadcast(sys_tid) = sys_cond_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================

// #define sys_list_nil  sys_list_manager.list_nil ();
// #define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
// #define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
// #define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
// #define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// ===============================
// global variable for assertion
var sys_assert_var = true;

// =====================

var lin_ref_77 = 0;
var s_78 = 0;
var tid1_103 = 0;
var tid2_104 = 0;

lin_buffer_create_63(sys_tid) =
  lin_buffer_create_63__1{  var ref_65 = atom_ref_manager.allocate(sys_gstack.frame_get(sys_tid, 0, 0));
  var lref_66 = sys_mylib_obj.castvwtp0(ref_65);
  sys_gstack.frame_push(sys_tid, lref_66);
  } ->
  Skip
  ;

lin_buffer_update_67(sys_tid) =
  lin_buffer_update_67__1{  var ref_70 = sys_mylib_obj.castvwtp0(sys_gstack.frame_get(sys_tid, 0, 0));
  sys_gstack.frame_push(sys_tid, ref_70);
  atom_ref_manager.setElement(ref_70, sys_gstack.frame_get(sys_tid, 0, 1))
  } ->
  lin_buffer_update_67__2{  var lref_71 = sys_mylib_obj.castvwtp0(sys_gstack.frame_get(sys_tid, 0, 2));
  sys_gstack.frame_push(sys_tid, lref_71);
  } ->
  Skip
  ;

lin_buffer_get_72(sys_tid) =
  lin_buffer_get_72__1{  var ref_74 = sys_mylib_obj.castvwtp0(sys_gstack.frame_get(sys_tid, 0, 0));
  sys_gstack.frame_push(sys_tid, ref_74);
  var v_75 = atom_ref_manager.getElement(ref_74);
  sys_gstack.frame_push(sys_tid, v_75);
  } ->
  lin_buffer_get_72__2{  var lref_76 = sys_mylib_obj.castvwtp0(sys_gstack.frame_get(sys_tid, 0, 1));
  var ret5_id = sys_mylib_obj.createTuple(2);
  sys_mylib_obj.setTupleElement(ret5_id, 0, lref_76);
  sys_mylib_obj.setTupleElement(ret5_id, 1, sys_gstack.frame_get(sys_tid, 0, 2));
  sys_gstack.frame_push(sys_tid, ret5_id);
  } ->
  Skip
  ;

loop_82(sys_tid) =
  loop_82__1{  var loop_clo26_id = sys_mylib_obj.createTuple2(4, sys_gstack.frame_get(sys_tid, 0, 1));
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  lin_buffer_get_72(sys_tid);
  loop_82__2{  var temp9_id = sys_gstack.retopr_frame(sys_tid);
  var ref_84 = sys_mylib_obj.getTupleElement(temp9_id, 0);;
  sys_gstack.frame_push(sys_tid, ref_84);
  var v_85 = sys_mylib_obj.getTupleElement(temp9_id, 1);;
  var temp10_id = call(eq, v_85, 2);
  sys_gstack.frame_push(sys_tid, temp10_id);
  } ->
  if (sys_gstack.frame_get_bool(sys_tid, 0, 3)) {
    loop_82__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_78, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_condwait(sys_tid);
    loop_82__2{  var ref_86 = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (ref_86, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_82(sys_tid)
  } else {
    loop_82__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    lin_buffer_get_72(sys_tid);
    loop_82__2{  var temp35_id = sys_gstack.retopr_frame(sys_tid);
    var ref36_id = sys_mylib_obj.getTupleElement(temp35_id, 0);;
    var v37_id = sys_mylib_obj.getTupleElement(temp35_id, 1);;
    var temp38_id = call(add, v37_id, 1);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (ref36_id, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (temp38_id, __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    lin_buffer_update_67(sys_tid);
    loop_82__3{  var ref39_id = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_78, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (ref39_id, __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_signal(sys_tid);
    loop_82__4{  var ref40_id = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (ref40_id, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_82(sys_tid)
  }
  ;

producer_79(sys_tid) =
  producer_79__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (s_78, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  conats_shared_acquire(sys_tid);
  producer_79__2{  var ref_81 = sys_gstack.retopr_frame(sys_tid);
  var env28_id = sys_mylib_obj.createTuple(0);
  var loop_closure29_id = sys_mylib_obj.createTuple2(4, env28_id);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (ref_81, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (env28_id, __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_82(sys_tid)
  ;

loop_94(sys_tid) =
  loop_94__1{  var loop_clo31_id = sys_mylib_obj.createTuple2(6, sys_gstack.frame_get(sys_tid, 0, 1));
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  lin_buffer_get_72(sys_tid);
  loop_94__2{  var temp16_id = sys_gstack.retopr_frame(sys_tid);
  var ref_96 = sys_mylib_obj.getTupleElement(temp16_id, 0);;
  sys_gstack.frame_push(sys_tid, ref_96);
  var v_97 = sys_mylib_obj.getTupleElement(temp16_id, 1);;
  var temp17_id = call(eq, v_97, 0);
  sys_gstack.frame_push(sys_tid, temp17_id);
  } ->
  if (sys_gstack.frame_get_bool(sys_tid, 0, 3)) {
    loop_94__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_78, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_condwait(sys_tid);
    loop_94__2{  var ref_98 = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (ref_98, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_94(sys_tid)
  } else {
    loop_94__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    lin_buffer_get_72(sys_tid);
    loop_94__2{  var temp42_id = sys_gstack.retopr_frame(sys_tid);
    var ref43_id = sys_mylib_obj.getTupleElement(temp42_id, 0);;
    var v44_id = sys_mylib_obj.getTupleElement(temp42_id, 1);;
    var temp45_id = call(sub, v44_id, 1);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (ref43_id, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (temp45_id, __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    lin_buffer_update_67(sys_tid);
    loop_94__3{  var ref46_id = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (s_78, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (ref46_id, __temp_list_args);
    sys_gstack.add_frame(sys_tid, __temp_list_args);
    } ->
    conats_shared_signal(sys_tid);
    loop_94__4{  var ref47_id = sys_gstack.retopr_frame(sys_tid);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (ref47_id, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_94(sys_tid)
  }
  ;

consumer_91(sys_tid) =
  consumer_91__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (s_78, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  conats_shared_acquire(sys_tid);
  consumer_91__2{  var ref_93 = sys_gstack.retopr_frame(sys_tid);
  var env33_id = sys_mylib_obj.createTuple(0);
  var loop_closure34_id = sys_mylib_obj.createTuple2(6, env33_id);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (ref_93, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (env33_id, __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_94(sys_tid)
  ;

// =====================

main_s(sys_tid) = 
  main_init{var __temp_list_args = sys_mylib_obj.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } ->
  main49_id__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (0, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  lin_buffer_create_63(sys_tid);
  main49_id__2{  lin_ref_77 = sys_gstack.retopr_frame(sys_tid);
  var bound = 1 + 2;
  s_78 = sys_mylib_obj.createTuple(bound);
  sys_mylib_obj.setTupleElement(s_78, 0, lin_ref_77);  // value
  sys_mylib_obj.setTupleElement(s_78, 1, sys_mutex_manager.allocate());  // mutex
  var index = 2;
  while (index < bound) {
      sys_mylib_obj.setTupleElement(s_78, index, sys_cond_manager.allocate());
      index = index + 1;
  };
  tid1_103 = sys_tid_allocator.allocate();
  tid2_104 = sys_tid_allocator.allocate();
  } ->
  sys_thread_create(tid1_103, 5, 0);
  sys_thread_create(tid2_104, 7, 0); 
  proc_thread_finalize(sys_tid);

main = main_s(sys_tid_allocator.allocate()) ||| Scheduler;

#define sys_assertion sys_assert_var == true;

#assert main deadlockfree;

#assert main |= G sys_assertion;


