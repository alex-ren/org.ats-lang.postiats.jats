// ===============================

#import "MyLib";  // import the library

// =====================

// library data structure (e.g. tuple, list)
var<MyLibObj> sys_mylib_obj = new MyLibObj();

// Set the initial capacity to 10.
var<AtomRefManager> atom_ref_manager = new AtomRefManager(10);

// Set the initial capacity to 10.
var<ArrayRefManager> array_ref_manager = new ArrayRefManager(10);

//
var<ViewManager> view_manager = new ViewManager();

// =====================
// For global exclusion.
var glb = 0;

// =====================

// Stack Operation
var<PStack> sys_gstack = new PStack();

// thread id allocator
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

// =====================

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

sch_thread_starter(sys_tid, fn, args) =
thread_init{
  // Create a list with one element.
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (args, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
} ->
  if (fn == 9) {
    loop_writer_104(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else if (fn == 10) {
    loop_reader_106(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else {Skip}
;

Scheduler() = (atomic{sys_ch_sch?sys_tid.fn.args ->  // It's safe to use *atomic* here.
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(sys_tid) = 
  thread_finalize.sys_tid{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<Allocator> sys_mutex_manager = new Allocator();

// ====================
conats_mutex_acquire(sys_tid) = sys_mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock.sys_tid{mutex[m] = 1} -> Skip;
// ====================
conats_mutex_release(sys_tid) = sys_mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_unlock_impl(sys_tid, m) = sys_munlock.sys_tid{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<Allocator> sys_cond_manager = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

// ====================

conats_shared_acquire(sys_tid) = conats_shared_acquire_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));
//  tup = sys_gstack.frame_get(sys_tid, 0, 0)
//  a = sys_mylib_obj.getTupleElement(tup, 0);
//  mutex = sys_mylib_obj.getTupleElement(tup, 1);
//  cond = sys_mylib_obj.getTupleElement(tup, 2);
conats_shared_acquire_impl(sys_tid, tup) = // atomic{ // Cannot use atomic here. Otherwise it would cause higher priority.
    shared_acq.sys_tid{sys_gstack.frame_push(sys_tid, sys_mylib_obj.getTupleElement(tup, 0))} ->
    sys_mutex_lock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1))
    // }  // end of atomic
    ;
// ====================
conats_shared_release(sys_tid) = conats_shared_release_impl(sys_tid, 
                                          sys_gstack.frame_get(sys_tid, 0, 0),
                                          sys_gstack.frame_get(sys_tid, 0, 1)
                                          );

conats_shared_release_impl(sys_tid, tup, a) = 
    sys_mutex_unlock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1));
// ====================
conats_shared_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);
conats_sharedn_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_signal_impl(sys_tid, tup, index) = 
    sys_cond_signal_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, index + 2));

sys_cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {  // I think it's safe to keep *atomic* here.

          csub.sys_tid{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};    
// ====================

conats_shared_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);

conats_sharedn_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_condwait_impl(sys_tid, tup, index) = sys_cond_wait_impl(sys_tid, 
                                  sys_mylib_obj.getTupleElement(tup, index + 2),  // cond
                                  sys_mylib_obj.getTupleElement(tup, 1));  // mutex

sys_cond_wait_impl(sys_tid, c, m) = atomic{
  cadd.sys_tid{cond_holder[c]++;} -> 
  sys_mutex_unlock_impl(sys_tid, m); 
  cond_chan[c]?_ -> Skip }; 
  sys_mutex_lock_impl(sys_tid, m)  // Cannot use atomic here. Otherwise it would cause current thread has higher priority to lock.
  ;

// ====================

conats_shared_broadcast(sys_tid) = conats_shared_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);
conats_sharedn_broadcast(sys_tid) = conats_shared_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));


conats_shared_broadcast_impl(sys_tid, tup, index) = 
    sys_cond_broadcast_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, index + 2));

sys_cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {  // It's safe to use *atomic* here.

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================

// #define sys_list_nil  sys_list_manager.list_nil ();
// #define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
// #define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
// #define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
// #define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// ===============================
// global variable for assertion
var sys_assert_var = true;

// =====================

var data_92 = 0;
var slot_93 = 0;
var latest_94 = 0;
var reading_95 = 0;
var tid1_108 = 0;
var tid2_109 = 0;
var tid3_110 = 0;

loop_69(sys_tid) =
  loop_69_s1.sys_tid{  var temp4_id = call(gte, sys_gstack.frame_get(sys_tid, 0, 0), 0);
  sys_gstack.frame_push(sys_tid, temp4_id);
  } ->
  if (sys_gstack.frame_get_bool(sys_tid, 0, 4)) {
    loop_69_s2.sys_tid{  var ele_74 = array_ref_manager.allocate(sys_gstack.frame_get(sys_tid, 0, 1), sys_gstack.frame_get(sys_tid, 0, 3));
    array_ref_manager.setElement(sys_gstack.frame_get(sys_tid, 0, 2), sys_gstack.frame_get(sys_tid, 0, 0), ele_74)
    } ->
    loop_69_s3.sys_tid{  var temp6_id = call(sub, sys_gstack.frame_get(sys_tid, 0, 0), 1);
    var __temp_list_args = sys_mylib_obj.list_nil ();
    __temp_list_args = sys_mylib_obj.list_cons (temp6_id, __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
    __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 3), __temp_list_args);
    sys_gstack.reload_frame(sys_tid, __temp_list_args);
    } ->
    loop_69(sys_tid)
  } else {
    Skip
  }
  ;

dataslots_create_63(sys_tid) =
  dataslots_create_63_s1.sys_tid{  var ele_67 = array_ref_manager.allocate(sys_gstack.frame_get(sys_tid, 0, 1), sys_gstack.frame_get(sys_tid, 0, 2));
  var array_68 = array_ref_manager.allocate(sys_gstack.frame_get(sys_tid, 0, 0), ele_67);
  sys_gstack.frame_push(sys_tid, array_68);
  var temp7_id = call(sub, sys_gstack.frame_get(sys_tid, 0, 0), 2);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (temp7_id, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (array_68, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  loop_69(sys_tid);
  dataslots_create_63_s2.sys_tid{  sys_gstack.delete_frame(sys_tid);
  sys_gstack.frame_push(sys_tid, sys_gstack.frame_get(sys_tid, 0, 3));
  } ->
  Skip
  ;

dataslots_update_75(sys_tid) =
  dataslots_update_75_s1.sys_tid{  var ele_80 = array_ref_manager.getElement(sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));
  sys_gstack.frame_push(sys_tid, ele_80);
  } ->
  dataslots_update_75_s2.sys_tid{  array_ref_manager.setElement(sys_gstack.frame_get(sys_tid, 0, 4), sys_gstack.frame_get(sys_tid, 0, 2), sys_gstack.frame_get(sys_tid, 0, 3))
  } ->
  Skip
  ;

dataslots_get_81(sys_tid) =
  dataslots_get_81_s1.sys_tid{  var ele_85 = array_ref_manager.getElement(sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));
  sys_gstack.frame_push(sys_tid, ele_85);
  } ->
  dataslots_get_81_s2.sys_tid{  var v_86 = array_ref_manager.getElement(sys_gstack.frame_get(sys_tid, 0, 3), sys_gstack.frame_get(sys_tid, 0, 2));
  sys_gstack.frame_push(sys_tid, v_86);
  } ->
  dataslots_get_81_s3.sys_tid{  sys_gstack.frame_push(sys_tid, sys_gstack.frame_get(sys_tid, 0, 4));
  } ->
  Skip
  ;

mc_acquire_ownership_87(sys_tid) =
  mc_acquire_ownership_87_s1.sys_tid{  var ret12_id = view_manager.get(sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1), 1, 1);
  sys_assert_var = !sys_mylib_obj.is_none(ret12_id);
  sys_gstack.frame_push(sys_tid, ret12_id);
  } ->
  Skip
  ;

mc_release_ownership_90(sys_tid) =
  mc_release_ownership_90_s1.sys_tid{  view_manager.put(sys_gstack.frame_get(sys_tid, 0, 0));
  } ->
  Skip
  ;

write_96(sys_tid) =
  write_96_s1.sys_tid{  var temp15_id = atom_ref_manager.getElement(reading_95);
  sys_gstack.frame_push(sys_tid, temp15_id);
  } ->
  write_96_s2.sys_tid{  var pair_98 = call(sub, 1, sys_gstack.frame_get(sys_tid, 0, 1));
  sys_gstack.frame_push(sys_tid, pair_98);
  var temp16_id = array_ref_manager.getElement(slot_93, pair_98);
  sys_gstack.frame_push(sys_tid, temp16_id);
  } ->
  write_96_s3.sys_tid{  var index_99 = call(sub, 1, sys_gstack.frame_get(sys_tid, 0, 3));
  sys_gstack.frame_push(sys_tid, index_99);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (data_92, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (index_99, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  dataslots_update_75(sys_tid);
  write_96_s4.sys_tid{  sys_gstack.delete_frame(sys_tid);
  array_ref_manager.setElement(slot_93, sys_gstack.frame_get(sys_tid, 0, 2), sys_gstack.frame_get(sys_tid, 0, 4))
  } ->
  write_96_s5.sys_tid{  atom_ref_manager.setElement(latest_94, sys_gstack.frame_get(sys_tid, 0, 2))
  } ->
  Skip
  ;

read_100(sys_tid) =
  read_100_s1.sys_tid{  var pair_101 = atom_ref_manager.getElement(latest_94);
  sys_gstack.frame_push(sys_tid, pair_101);
  } ->
  read_100_s2.sys_tid{  atom_ref_manager.setElement(reading_95, sys_gstack.frame_get(sys_tid, 0, 0))
  } ->
  read_100_s3.sys_tid{  var index_102 = array_ref_manager.getElement(slot_93, sys_gstack.frame_get(sys_tid, 0, 0));
  sys_gstack.frame_push(sys_tid, index_102);
  } ->
  read_100_s4.sys_tid{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (data_92, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  dataslots_get_81(sys_tid);
  read_100_s5.sys_tid{  var item_103 = sys_gstack.retopr_frame(sys_tid);
  sys_gstack.frame_push(sys_tid, 0);
  } ->
  Skip
  ;

loop_writer_104(sys_tid) =
  loop_writer_104_s1.sys_tid{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  write_96(sys_tid);
  loop_writer_104_s2.sys_tid{  sys_gstack.delete_frame(sys_tid);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_writer_104(sys_tid)
  ;

loop_reader_106(sys_tid) =
  loop_reader_106_s1.sys_tid{  var __temp_list_args = sys_mylib_obj.list_nil ();
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  read_100(sys_tid);
  loop_reader_106_s2.sys_tid{  var temp25_id = sys_gstack.retopr_frame(sys_tid);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_reader_106(sys_tid)
  ;

// =====================

main_s(sys_tid) = 
  main_init.sys_tid{var __temp_list_args = sys_mylib_obj.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } ->
  main40_id_s1.sys_tid{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (2, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (2, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (0, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  dataslots_create_63(sys_tid);
  main40_id_s2.sys_tid{  data_92 = sys_gstack.retopr_frame(sys_tid);
  slot_93 = array_ref_manager.allocate(2, 0);
  latest_94 = atom_ref_manager.allocate(0);
  reading_95 = atom_ref_manager.allocate(0);
  tid1_108 = sys_tid_allocator.allocate();
  tid2_109 = sys_tid_allocator.allocate();
  tid3_110 = sys_tid_allocator.allocate();
  } ->
  sys_thread_create(tid1_108, 10, 0);
  sys_thread_create(tid2_109, 10, 0);
  sys_thread_create(tid3_110, 9, 0); 
  proc_thread_finalize(sys_tid);

main = main_s(sys_tid_allocator.allocate()) ||| Scheduler;

#define sys_assertion sys_assert_var == true;

// #assert main deadlockfree;

// #assert main |= G sys_assertion;


#assert main deadlockfree;

//#assert main |= G sys_assertion;



