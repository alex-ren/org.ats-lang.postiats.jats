// ===============================



#import "MyLib";

// =====================

var<PStack> sys_gstack = new PStack();
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

sch_thread_starter(sys_tid, fn, args) =
  thread_init{sys_gstack.add_frame(sys_tid, args);} ->
  Skip
;

Scheduler() = (atomic{sys_ch_sch?sys_tid.fn.args -> 
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(sys_tid) = 
  thread_finalize{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<Allocator> sys_mutex_manager = new Allocator();

sys_mutex_lock(sys_tid) = sys_mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;

sys_mutex_unlock(sys_tid) = sys_mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_unlock_impl(sys_tid, m) = sys_munlock{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<Allocator> sys_cond_manager = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

sys_cond_wait(sys_tid) = sys_cond_wait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

sys_cond_wait_impl(sys_tid, c, m) = atomic{cadd{cond_holder[c]++;} -> 
                                    sys_mutex_unlock_impl(sys_tid, m); 
                                    cond_chan[c]?_ -> sys_mutex_lock_impl(sys_tid, m)};

sys_cond_signal(sys_tid) = sys_cond_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};


sys_cond_broadcast(sys_tid) = sys_cond_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================
var<LinkedList> sys_list_manager = new LinkedList();

#define sys_list_nil  sys_list_manager.list_nil ();
#define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
#define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
#define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
#define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// ===============================
// global variable for assertion
var sys_assert_var = true;

// =====================


foo1_3447(sys_tid) =
  {  var foo1_clo14_id = sys_tuple2_form(2, sys_gstack.frame_get(sys_tid, 0, 2));
  sys_gstack.frame_push(sys_tid, 3);
  } ->
  Skip
  ;

foo2_3450(sys_tid) =
  {  var foo2_clo16_id = sys_tuple2_form(3, sys_gstack.frame_get(sys_tid, 0, 2));
  var foo1_3447_ele17_id = sys_tuple_get(sys_gstack.frame_get(sys_tid, 0, 2), 0);
  var __temp_list_args = sys_list_manager.list_nil ();
  __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  __temp_list_args = sys_list_manager.list_cons (sys_gstack.frame_get_int(sys_tid, 0, 1), __temp_list_args);
  __temp_list_args = sys_list_manager.list_cons (foo1_3447_ele17_id, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  foo1_3447(sys_tid);
  {  var jats.utfpl.stfpl.mcinstruction.MCSId@35a7fabd = sys_gstack.retopr_frame(sys_tid);
  var ret5_id = call(jats.utfpl.stfpl.mcinstruction.MCSId@64bd4e4d, temp6_id, sys_gstack.frame_get_int(sys_tid, 0, 1));
  sys_gstack.frame_push(sys_tid, ret5_id);
  } ->
  Skip
  ;

foo3_3453(sys_tid) =
  {  var foo3_clo19_id = sys_tuple2_form(4, sys_gstack.frame_get(sys_tid, 0, 1));
  var ret8_id = PExpTupleCreate;
  PInsTupleAdd
  PInsTupleAdd
  sys_gstack.frame_push(sys_tid, ret8_id);
  } ->
  Skip
  ;

foo4_3455(sys_tid) =
  {  var foo4_clo21_id = sys_tuple2_form(5, sys_gstack.frame_get(sys_tid, 0, 1));
  var ret10_id = call(jats.utfpl.stfpl.mcinstruction.MCSId@485fd4e6, sys_gstack.frame_get_int(sys_tid, 0, 0), 2);
  sys_gstack.frame_push(sys_tid, ret10_id);
  } ->
  Skip
  ;

main_void_0_56(sys_tid) =
  {  var temp12_id = call(jats.utfpl.stfpl.mcinstruction.MCSId@b926d29, "Helloworld");
  sys_gstack.frame_push(sys_tid, None);
  } ->
  Skip
  ;

// =====================

main_s(sys_tid) = 
  main_init{var __temp_list_args = sys_list_manager.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } ->
  {  var env22_id = PExpTupleCreate;
  var foo1_closure23_id = sys_tuple2_form(2, env22_id);
  var env24_id = PExpTupleCreate;
  PInsTupleAdd
  var foo2_closure25_id = sys_tuple2_form(3, env24_id);
  var env26_id = PExpTupleCreate;
  var foo3_closure27_id = sys_tuple2_form(4, env26_id);
  var env28_id = PExpTupleCreate;
  var foo4_closure29_id = sys_tuple2_form(5, env28_id);
  } ->
  Skip; 
  proc_thread_finalize(sys_tid);

main = main_s(0) ||| Scheduler;

#define sys_assertion sys_assert_var == true;



