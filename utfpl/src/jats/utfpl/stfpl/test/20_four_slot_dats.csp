// ===============================

#import "MyLib";  // import the library

// =====================

// library data structure (e.g. tuple, list)
var<MyLibObj> sys_mylib_obj = new MyLibObj();

// Set the initial capacity to 10.
var<AtomRefManager> atom_ref_manager = new AtomRefManager(10);

// Set the initial capacity to 10.
var<ArrayRefManager> array_ref_manager = new ArrayRefManager(10);

//
var<ViewManager> view_manager = new ViewManager();

// =====================
// For global exclusion.
var glb = 0;

// =====================

// Stack Operation
var<PStack> sys_gstack = new PStack();

// thread id allocator
var<Allocator> sys_tid_allocator = new Allocator();  // todo: improve

// =====================

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

sch_thread_starter(sys_tid, fn, args) =
thread_init{
  // Create a list with one element.
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (args, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
} ->
  if (fn == 7) {
    loop_write_89(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else if (fn == 8) {
    loop_read_91(sys_tid); proc_thread_finalize(sys_tid)
    |||
    Scheduler()
  }
  else {Skip}
;

Scheduler() = (atomic{sys_ch_sch?sys_tid.fn.args -> 
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(sys_tid) = 
  thread_finalize{
    sys_gstack.delete_frame(sys_tid); 
    sys_thread_num--;
    sys_tid_allocator.release(sys_tid);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var<Allocator> sys_mutex_manager = new Allocator();

// ====================
conats_mutex_acquire(sys_tid) = sys_mutex_lock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_lock_impl(sys_tid, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;
// ====================
conats_mutex_release(sys_tid) = sys_mutex_unlock_impl (sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_mutex_unlock_impl(sys_tid, m) = sys_munlock{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var<Allocator> sys_cond_manager = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

// ====================

conats_shared_acquire(sys_tid) = conats_shared_acquire_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));
//  tup = sys_gstack.frame_get(sys_tid, 0, 0)
//  a = sys_mylib_obj.getTupleElement(tup, 0);
//  mutex = sys_mylib_obj.getTupleElement(tup, 1);
//  cond = sys_mylib_obj.getTupleElement(tup, 2);
conats_shared_acquire_impl(sys_tid, tup) = atomic{
    {sys_gstack.frame_push(sys_tid, sys_mylib_obj.getTupleElement(tup, 0))} ->
    sys_mutex_lock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1))
    };
// ====================
conats_shared_release(sys_tid) = conats_shared_release_impl(sys_tid, 
                                          sys_gstack.frame_get(sys_tid, 0, 0),
                                          sys_gstack.frame_get(sys_tid, 0, 1)
                                          );

conats_shared_release_impl(sys_tid, tup, a) = 
    sys_mutex_unlock_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, 1));
// ====================
conats_shared_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);
conats_sharedn_signal(sys_tid) = conats_shared_signal_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_signal_impl(sys_tid, tup, index) = 
    sys_cond_signal_impl(sys_tid, sys_mylib_obj.getTupleElement(tup, index + 2));

sys_cond_signal_impl(sys_tid, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};    
// ====================

conats_shared_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), 0);

conats_sharedn_condwait(sys_tid) = 
    conats_shared_condwait_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0), sys_gstack.frame_get(sys_tid, 0, 1));

conats_shared_condwait_impl(sys_tid, tup, index) = sys_cond_wait_impl(sys_tid, 
                                  sys_mylib_obj.getTupleElement(tup, index + 2),  // cond
                                  sys_mylib_obj.getTupleElement(tup, 1));  // mutex

sys_cond_wait_impl(sys_tid, c, m) = atomic{
  cadd{cond_holder[c]++;} -> 
  sys_mutex_unlock_impl(sys_tid, m); 
  cond_chan[c]?_ -> 
  sys_mutex_lock_impl(sys_tid, m)
  };

// ====================
sys_cond_broadcast(sys_tid) = sys_cond_broadcast_impl(sys_tid, sys_gstack.frame_get(sys_tid, 0, 0));

sys_cond_broadcast_impl(sys_tid, c) = atomic{if (cond_holder[c] > 0) {

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================

// #define sys_list_nil  sys_list_manager.list_nil ();
// #define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
// #define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
// #define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
// #define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// ===============================
// global variable for assertion
var sys_assert_var = true;

// =====================

var mwp = 0;
var mc_mwi = 0;
var mc_min_write = 0;
var mc_mw_init = 0;
var L_63 = 0;
var R_64 = 0;
var slot_65 = 0;
var data_66 = 0;
var tid1_102 = 0;
var tid2_103 = 0;

write(sys_tid) =
  Skip
  ;

writer_70(sys_tid) =
  writer_70__1{  var temp4_id = atom_ref_manager.getElement(R_64);
  sys_gstack.frame_push(sys_tid, temp4_id);
  } ->
  writer_70__2{  var wp_72 = call(sub, 1, sys_gstack.frame_get(sys_tid, 0, 1));
  sys_gstack.frame_push(sys_tid, wp_72);
  var temp5_id = array_ref_manager.getElement(slot_65, wp_72);
  sys_gstack.frame_push(sys_tid, temp5_id);
  } ->
  writer_70__3{  var wi_73 = call(sub, 1, sys_gstack.frame_get(sys_tid, 0, 3));
  sys_gstack.frame_push(sys_tid, wi_73);
  } ->
  ifa (glb == 0) {atomic { {glb = 1;} ->
  writer_70__4{  mwp = sys_gstack.frame_get(sys_tid, 0, 2);
  } ->
  writer_70__5{  mc_mwi = sys_gstack.frame_get(sys_tid, 0, 4);
  } ->
  writer_70__6{  mc_min_write = 1;
  } ->
  {glb = 0;} -> Skip } };
  writer_70__7{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 2), __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 4), __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  write(sys_tid);
  writer_70__8{  sys_gstack.delete_frame(sys_tid);
  mc_min_write = 0;
  } ->
  writer_70__9{  array_ref_manager.setElement(slot_65, sys_gstack.frame_get(sys_tid, 0, 2), sys_gstack.frame_get(sys_tid, 0, 4))
  } ->
  writer_70__10{  atom_ref_manager.setElement(L_63, sys_gstack.frame_get(sys_tid, 0, 2))
  } ->
  writer_70__11{  mc_mw_init = 1;
  } ->
  Skip
  ;

comp3_74(sys_tid) =
  comp3_74__7{  if (sys_gstack.frame_get_bool(sys_tid, 0, 0)) {
      if (sys_gstack.frame_get_bool(sys_tid, 0, 1)) {
          if (sys_gstack.frame_get_bool(sys_tid, 0, 2)) {
              sys_gstack.frame_push(sys_tid, true);
          } else {
              sys_gstack.frame_push(sys_tid, false);
          }
      } else {
          sys_gstack.frame_push(sys_tid, false);
      }
  } else {
      sys_gstack.frame_push(sys_tid, false);
  }
  } ->
  Skip
  ;

reader_78(sys_tid) =
  reader_78__1{  var rp_80 = atom_ref_manager.getElement(L_63);
  sys_gstack.frame_push(sys_tid, rp_80);
  } ->
  reader_78__2{  atom_ref_manager.setElement(R_64, sys_gstack.frame_get(sys_tid, 0, 0))
  } ->
  reader_78__3{  var ri_81 = array_ref_manager.getElement(slot_65, sys_gstack.frame_get(sys_tid, 0, 0));
  sys_gstack.frame_push(sys_tid, ri_81);
  } ->
  ifa (glb == 0) {atomic { {glb = 1;} ->
  reader_78__4{  var wp_83 = mwp;
  sys_gstack.frame_push(sys_tid, wp_83);
  } ->
  reader_78__5{  var wi_85 = mc_mwi;
  sys_gstack.frame_push(sys_tid, wi_85);
  } ->
  reader_78__6{  var in_write_87 = mc_min_write;
  sys_gstack.frame_push(sys_tid, in_write_87);
  } ->
  {glb = 0;} -> Skip } };
  reader_78__7{  var temp21_id = call(eq, sys_gstack.frame_get(sys_tid, 0, 4), 1);
  var temp22_id = call(eq, sys_gstack.frame_get(sys_tid, 0, 2), sys_gstack.frame_get(sys_tid, 0, 0));
  var temp23_id = call(eq, sys_gstack.frame_get(sys_tid, 0, 3), sys_gstack.frame_get(sys_tid, 0, 1));
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (temp21_id, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (temp22_id, __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (temp23_id, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  comp3_74(sys_tid);
  reader_78__8{  var temp24_id = sys_gstack.retopr_frame(sys_tid);
  var temp25_id = call(negation, temp24_id);
  sys_assert_var = temp25_id;
  } ->
  reader_78__9{  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 1), __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  read(sys_tid);
  reader_78__10{  var x_88 = sys_gstack.retopr_frame(sys_tid);
  sys_gstack.frame_push(sys_tid, x_88);
  } ->
  Skip
  ;

loop_write_89(sys_tid) =
  loop_write_89__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  data_create(sys_tid);
  loop_write_89__2{  var temp28_id = sys_gstack.retopr_frame(sys_tid);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (temp28_id, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  writer_70(sys_tid);
  loop_write_89__3{  sys_gstack.delete_frame(sys_tid);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_write_89(sys_tid)
  ;

loop_read_91(sys_tid) =
  loop_read_91__1{  var w_init_94 = mc_mw_init;
  sys_gstack.frame_push(sys_tid, w_init_94);
  } ->
  loop_read_91__2{  var temp31_id = call(gt, sys_gstack.frame_get(sys_tid, 0, 1), 0);
  sys_assert_var = temp31_id;
  } ->
  loop_read_91__3{  var __temp_list_args = sys_mylib_obj.list_nil ();
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  reader_78(sys_tid);
  loop_read_91__4{  var x_96 = sys_gstack.retopr_frame(sys_tid);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (sys_gstack.frame_get(sys_tid, 0, 0), __temp_list_args);
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  loop_read_91(sys_tid)
  ;

data_create(sys_tid) =
  data_create__1{  sys_gstack.frame_push(sys_tid, 1);
  } ->
  Skip
  ;

read(sys_tid) =
  read__1{  var __temp_list_args = sys_mylib_obj.list_nil ();
  sys_gstack.reload_frame(sys_tid, __temp_list_args);
  } ->
  data_create(sys_tid)
  ;

// =====================

main_s(sys_tid) = 
  main_init{var __temp_list_args = sys_mylib_obj.list_nil ();
            sys_gstack.add_frame(0, __temp_list_args); 
            } ->
  main44_id__1{  L_63 = atom_ref_manager.allocate(0);
  R_64 = atom_ref_manager.allocate(0);
  slot_65 = array_ref_manager.allocate(2, 0);
  data_66 = array_ref_manager.allocate(4, 0);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  data_create(sys_tid);
  main44_id__2{  var temp35_id = sys_gstack.retopr_frame(sys_tid);
  var __temp_list_args = sys_mylib_obj.list_nil ();
  __temp_list_args = sys_mylib_obj.list_cons (temp35_id, __temp_list_args);
  sys_gstack.add_frame(sys_tid, __temp_list_args);
  } ->
  writer_70(sys_tid);
  main44_id__3{  sys_gstack.delete_frame(sys_tid);
  tid1_102 = sys_tid_allocator.allocate();
  tid2_103 = sys_tid_allocator.allocate();
  } ->
  sys_thread_create(tid1_102, 8, 0);
  sys_thread_create(tid2_103, 7, 0); 
  proc_thread_finalize(sys_tid);

main = main_s(sys_tid_allocator.allocate()) ||| Scheduler;

#define sys_assertion sys_assert_var == true;

// #assert main deadlockfree;

// #assert main |= G sys_assertion;


#assert main deadlockfree;

#assert main |= G sys_assertion;



