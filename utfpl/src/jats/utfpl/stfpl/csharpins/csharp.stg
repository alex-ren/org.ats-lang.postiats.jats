group csharp;


program_st(types, funs, main) ::= <<
class <closure_type_st()> {
    public Object func;
    public Object env;
    
    public <closure_type_st()>(Object func0, Object env0) {
        func = func0;
        env = env0;
    }
}


<types; separator="\n">

class Program {
    <funs; separator="\n">
    <main>
}
>>


ICSTypeBooking_st(grecords, gdelegates, genvs) ::= <<
<grecords; separator="\n">

<gdelegates; separator="\n">

<genvs; separator="\n">

>>

CSTBookingRecord_st(name, type_paras, members, init_paras, init_members) ::= <<
class <name>\<<type_paras; separator=", ">\> {
    <members; separator="\n">
    
    public <name>(<init_paras; separator=", ">) {
        <init_members; separator="\n">
    }
};
>>

rec_member_st(type, name) ::= <<
public <type> <name>;
>>

CSTBookingFun_st(name, type_paras, paras, ret_para) ::= <<
delegate <ret_para> <name>\<<type_paras;separator=", ">\>(<paras; separator=", ">);
>>

CSTBookingEnv_st(name, members, init_paras, init_members) ::= <<
class <env_type_t(name)> {
    <members; separator="\n">
    
    public <env_type_t(name)>(<init_paras; separator=", ">) {
        <init_members; separator="\n">
    }
};
>>


CSDefFun_st(is_clo, env_type, name, paras, ret_type, inss) ::= <<
static public <ret_type> <if(is_clo)><closure_fun_name_t(name)><else><name><endif>(<paras; separator=", ">) {
    <if(env_type)><env_type> env0 = (<env_type>)env;<endif>
    <inss; separator="\n">
}
>>

// == closure related ======================

closure_fun_name_t(name) ::= <<
<name>_clo_impl
>>

env_type_t(name) ::= <<
Env_<name>
>>

env_obj_t(name) ::= <<
<name>_env_obj
>>

// Function of closure has an extra parameter.
closure_env_para_t () ::= <<
<CSObjectType_st()> env
>>

closure_func_st(fun_name) ::= <<
((<closure_type_st()>)<fun_name>).func
>>

closure_env_st(fun_name) ::= <<
((<closure_type_st()>)<fun_name>).env
>>

closure_type_st() ::= <<
Closure
>>

// ========================

fun_para_st(name, type) ::= <<
<type> <name>
>>

assignment_st(holder, value) ::= <<
<holder> = <value>;
>>


// ======================

CSInsCall_st(name, type, call) ::= <<
<if(type)><type> <name> = <endif><call>;
>>

CSInsCall_ret_st(name, type, call) ::= <<
return <call>;
>>

CSInsCall_call_fun_st(fun_name, fun_type, args) ::= <<
fun: <if(fun_type)>((<fun_type>)<fun_name>)<else><fun_name><endif>(<args; separator=", ">)
>>

// Caller takes cares of the env argument.
CSInsCall_call_clo_obj_st(obj, fun_type, args) ::= <<
clo1: ((<fun_type>)<closure_func_st(obj)>)(<args; separator=", ">)
>>

// Caller takes cares of the env argument.
CSInsCall_call_clo_name_st(fun_name, args) ::= <<
clo2: <fun_name>(<args; separator=", ">)
>>

CSInsClosure_st(name, fun_type, args) ::= <<
<env_type_t(name)> <env_obj_t(name)> = new <env_type_t(name)>(<args; separator=", ">);
<closure_type_st()> <name> = new <closure_type_st()>((<fun_type>)<closure_fun_name_t(name)>, <env_obj_t(name)>);
>>

CSInsCond_st(type, name, cond, btrue, bfalse) ::= <<
<type> <name>;
if (<cond>) {
    <btrue; separator="\n">
}<if(bfalse)> else {
    <bfalse; separator="\n">
}<endif>
>>

CSInsCond_ret_st(type, name, cond, btrue, bfalse) ::= <<
if (<cond>) {
    <btrue; separator="\n">
}<if(bfalse)> else {
    <bfalse; separator="\n">
}<endif>
>>

CSInsMove_st(type, name, v) ::= <<
<type> <name> = <v>;
>>

CSInsPatLabDecompose_st(type, name, tuple_type, tuple_ele, member) ::= <<
<type> <name> = ((<tuple_type>)<tuple_ele>).<member>;
>>

CSInsPatLabDecompose_ret_st(type, name, tuple_type, tuple_ele, member) ::= <<
return ((<tuple_type>)<tuple_ele>).<member>;
>>

CSInsTuple_st(name, type, values) ::= <<
<type> <name> = new <type>(<values; separator=", ">);
>>

CSInsTuple_ret_st(name, type, values) ::= <<
return new <type>(<values; separator=", ">);
>>

ret_st(v) ::= <<
return<if(v)> <v><endif>;
>>

// ======================
CSBoolType_st() ::= <<
bool
>>

CSCharType_st() ::= <<
char
>>

CSClassType_st(name, type_args) ::= <<
<name>\<<type_args; separator=", ">\>
>>

CSFloatType_st() ::= <<
double
>>

CSFunType_st (name, args) ::= <<
<name>\<<args; separator=", ">\>
>>

CSIntType_st() ::= <<
int
>>

CSObjectType_st() ::= <<
Object
>>

CSStringType_st() ::= <<
String
>>

CSVoidType_st() ::= <<
void
>>















