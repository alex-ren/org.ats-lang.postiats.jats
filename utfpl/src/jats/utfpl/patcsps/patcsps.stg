group patcsps;

pmodel_st(scheduler_body, gvar_lst, proc_lst, main_proc_body) ::= <<

// ===============================


<!#import "PStack";!>

#import "MyLib";

// =====================

var\<PStack> <sys_gstack()> = new PStack();
var\<Allocator> <sys_tid_allocator()> = new Allocator();  // todo: improve

var sys_thread_num = 1;

channel sys_ch_sch 0;

var sch_sys_tid;
var sch_fn;
var sch_args;

<scheduler_body>;

Scheduler() = (atomic{sys_ch_sch?<sys_tid()>.fn.args -> 
                      {sys_thread_num++;
                       sch_sys_tid = sys_tid;
                       sch_fn = fn;
                       sch_args = args;
                      } -> Skip
                      };
  sch_thread_starter(sch_sys_tid, sch_fn, sch_args)
  )
  []
  ifa (sys_thread_num == 0) {Skip}
  ;

proc_thread_finalize(<sys_tid()>) = 
  thread_finalize{
    <sys_gstack()>.delete_frame(<sys_tid()>); 
    sys_thread_num--;
    <sys_tid_allocator()>.release(<sys_tid()>);
  } -> Skip;

sys_thread_create (tid, fn, args) = sys_ch_sch!tid.fn.args -> Skip;

// =====================

var mutex[10];  // 10 mutex

var\<Allocator> <sys_mutex_manager()> = new Allocator();

sys_mutex_lock(<sys_tid()>) = sys_mutex_lock_impl (<sys_tid()>, sys_gstack.frame_get(<sys_tid()>, 0, 0));

sys_mutex_lock_impl(<sys_tid()>, m) = [mutex[m] == 0] mlock{mutex[m] = 1} -> Skip;

sys_mutex_unlock(<sys_tid()>) = sys_mutex_unlock_impl (<sys_tid()>, sys_gstack.frame_get(<sys_tid()>, 0, 0));

sys_mutex_unlock_impl(<sys_tid()>, m) = sys_munlock{mutex[m] = 0} -> Skip;
// ======================

var cond_holder[10];  // 10 condition

var\<Allocator> <sys_cond_manager()> = new Allocator();

channel cond_chan[10] 0;
var cond_count = 0;

sys_cond_wait(<sys_tid()>) = sys_cond_wait_impl(<sys_tid()>, sys_gstack.frame_get(<sys_tid()>, 0, 0), sys_gstack.frame_get(<sys_tid()>, 0, 1));

sys_cond_wait_impl(<sys_tid()>, c, m) = atomic{cadd{cond_holder[c]++;} -> 
                                    sys_mutex_unlock_impl(<sys_tid()>, m); 
                                    cond_chan[c]?_ -> sys_mutex_lock_impl(<sys_tid()>, m)};

sys_cond_signal(<sys_tid()>) = sys_cond_signal_impl(<sys_tid()>, sys_gstack.frame_get(<sys_tid()>, 0, 0));

sys_cond_signal_impl(<sys_tid()>, c) = atomic {if (cond_holder[c] > 0) {

          csub{cond_holder[c]--;} ->

          cond_chan[c]!1

          -> Skip

        }};

        
sys_cond_broadcast(<sys_tid()>) = sys_cond_broadcast_impl(<sys_tid()>, sys_gstack.frame_get(<sys_tid()>, 0, 0));

sys_cond_broadcast_impl(<sys_tid()>, c) = atomic{if (cond_holder[c] > 0) {

          sys_signaln(c, cond_holder[c]); csub{cond_holder[c]=0;} -> Skip

        }};

sys_signaln(c, n) = if (n > 0) {cond_chan[c]!1 -> sys_signaln(c, n-1)}
                else {Skip}
                ;

// ===============================
var\<LinkedList> sys_list_manager = new LinkedList();

#define sys_list_nil  sys_list_manager.list_nil ();
#define sys_list_cons(x, xs) sys_list_manager.list_cons (x, xs);
#define sys_list_get_header(xs) sys_list_manager.list_get_header (xs);
#define sys_list_get_tail(xs) sys_list_manager.list_get_tail (xs);
#define sys_list_is_nil(xs) sys_list_manager.list_is_nil (xs);

// =====================

<gvar_lst; separator="\n">

<proc_lst; separator="\n\n">

// =====================

main_s(<sys_tid()>) = 
  main_init{var <local_temp_list()> = <sys_list_manager()>.list_nil ();
            <sys_gstack()>.add_frame(0, <local_temp_list()>); 
            } ->
  <main_proc_body>; 
  proc_thread_finalize(<sys_tid()>);

main = main_s(0) ||| Scheduler;




// #assert main deadlockfree;

// #define Prop1 (n_40 \< 2);

// #assert main |= G Prop1;

>>

scheduler_body_st(proc1, proc_lst) ::= <<
sch_thread_starter(<sys_tid()>, fn, args) =
  thread_init{<sys_gstack()>.add_frame(<sys_tid()>, args);} ->
<if(proc1)>
  if (fn == <proc1.Addr>) {
    <proc1>(<sys_tid()>); proc_thread_finalize(<sys_tid()>)
    |||
    Scheduler()
  }
  <proc_lst:{x| <schedule_else_if(x)>}; separator="\n">
  else {Skip}
<else>
  Skip
<endif>
>>

schedule_else_if(proc) ::= <<
else if (fn == <proc.Addr>) {
  <proc>(<sys_tid()>); proc_thread_finalize(<sys_tid()>)
  |||
  Scheduler()
}
>>

sys_tid_allocator() ::= <<
sys_tid_allocator
>>

pgdecvar_st(id, init) ::= <<
var <id><if(init)> = <init><endif>;
>>

pgdecarray_st(id, sz) ::= <<
var <id>[<sz>];
>>

pprocbranch_ifcommon_st(cond, if_proc, else_proc) ::= <<
if (<cond>) {
  <if_proc>
}<if(else_proc)> else {
  <else_proc>
}<endif>
>>

pprocbranch_ifa_st(cond, if_proc, else_proc) ::= <<
if (<cond>) {
  <if_proc>
}<if(else_proc)> else {
  <else_proc>
}<endif>
>>

pprocbranch_ifb_st(cond, if_proc, else_proc) ::= <<
if (<cond>) {
  <if_proc>
}<if(else_proc)> else {
  <else_proc>
}<endif>
>>
  
pevent_st(stat_lst) ::= <<
{  <stat_lst; separator="\n">
}
>>

pexpfunccall_st(fun_lab, arg_lst) ::= <<
<if(arg_lst)>call(<[fun_lab, arg_lst]; separator=", ">)<else><fun_lab><endif>
>>

pstatlocalvardec_st(name, val, is_global) ::= <<
<if(is_global)><else>var <endif><name> = <val>;
>>

pstatassignment_st(name, val) ::= <<
<name> = <val>;
>>

pprocatom_st() ::= <<
Skip
>>

pproccall_st(name) ::= <<
<name>(<sys_tid()>)
>>

pgdecproc_st(name, para_lst, body) ::= <<
<name>(<sys_tid()>) =
<!  <proc_preloge_st()> ->  !>
  <body>
  ;
>>

pprocseq_st(proc_left, proc_right) ::= <<
<proc_left>;
<proc_right>
>>

pexpstackopr_default_t(frame, pos) ::= <<
<sys_gstack()>.frame_get(<sys_tid()>, <frame>, <pos>)
>>

pexpstackopr_bool_t(frame, pos) ::= <<
<sys_gstack()>.frame_get_bool(<sys_tid()>, <frame>, <pos>)
>>

pprocevent_st(evt, proc) ::= <<
<evt> ->
<proc>
>>

pprocchannel_st(ch, proc) ::= <<
<ch> ->
<proc>
>>

pchannelrecv_st(name, ele_lst) ::= <<
<name>?<ele_lst; separator=".">
>>

pchannelsend_st(name, msg_lst) ::= <<
<name>!<msg_lst; separator=".">
>>

pexpopr_unary_st(exp, opr) ::= <<
<opr><exp>
>>

pexpopr_binary_st(exp1, exp2, opr) ::= <<
<exp1> <opr> <exp2>
>>

pprocparallel_st(proc_lst) ::= <<
<proc_lst; separator="\n|||\n">
>>

pstatstackpush_st(name) ::= <<
<sys_gstack()>.frame_push(<sys_tid()>, <name>);
>>

pstatreturn_st(v) ::= <<
<sys_gstack()>.frame_push(<sys_tid()>, <v>);
>>

pnone_st() ::= <<
0
>>

pinscond_st(cond, trueb, falseb) ::= <<
if (<cond>) {
    <trueb; separator="\n">
} else {
    <falseb; separator="\n">
}
>>

pinsload_st(src, dst) ::= <<
var <dst> = <src>;
>> 

pinsloadarray_st(src, index, dst) ::= <<
<dst> = <src>[index];
>>

pinsstore_st(src, dst) ::= <<
<dst> = <src>;
>>

pinsstorearray_st(src, dst, index) ::= <<
<dst>[index] = src
>>

pinsmutexalloc_st(holder, is_global) ::= <<
<if(is_global)><else>var <endif><holder> = <sys_mutex_manager()>.allocate();
>>

pinsmutexrelease_st(mutex) ::= <<
<sys_mutex_manager()>.release(<mutex>);
>>

pinscondalloc_st(holder, is_global) ::= <<
<if(is_global)><else>var <endif><holder> = <sys_cond_manager()>.allocate();
>>

pinscondrelease_st(cond) ::= <<
<sys_cond_manager()>.release(<cond>);
>>

sys_mutex_manager() ::= <<
sys_mutex_manager
>>

sys_cond_manager() ::= <<
sys_cond_manager
>>

pprocthreadcreate_st(tid, funaddr, args) ::= <<
sys_thread_create(<tid>, <funaddr>, <args>)
>>

pstatproccallprelogue_st(args, is_tail_call) ::= <<
var <local_temp_list()> = <sys_list_manager()>.list_nil ();
<args:{arg|<local_temp_list()> = <sys_list_manager()>.list_cons (<arg>, <local_temp_list()>);}; separator="\n">
<if(is_tail_call)><sys_gstack()>.reload_frame(<sys_tid()>, <local_temp_list()>);<else><sys_gstack()>.add_frame(<sys_tid()>, <local_temp_list()>);<endif>
>>

pstatproccallepilogue_st(ret, is_global) ::= <<
<if(ret)><if(is_global)><else>var <endif><ret> = <endif><sys_gstack()>.retopr_frame(<sys_tid()>);
>>

local_temp_list() ::= <<__temp_list_args>>

sys_gstack() ::= <<sys_gstack>>

sys_tid() ::= <<sys_tid>>

sys_list_manager() ::= <<sys_list_manager>>














