group ats_il_java;

program_st(filename, stats, main) ::= <<                 
package postiats;                                                   
                                                                                 

import org.ats_lang.postiats.jats.type.*;
import org.ats_lang.postiats.jats.value.*;
import org.ats_lang.postiats.jats.ccomp.*;   

import java.util.HashMap;
import java.util.Map;

public class <filename> {
    <stats; separator="\n\n">
    
    <main>
    
}


>>

stats_gvar_st(gvar) ::= <<
/*DefinitionNode*/<if(gvar)>static public <gvar>;<endif>
>>

gvar_def_st(type, name, init) ::= <<
/*DefinitionNode*/<type> <name> = <init>;
>>

elt_type_init_val_st() ::= <<
/*DefinitionNode*/null
>>

ref_type_init_val_st(realty) ::= <<
/*DefinitionNode*/<realty>.createRefDefault()
>>

nonref_type_init_val_st(ty) ::= <<
/*DefinitionNode*/<ty>.createNormalDefault()
>>


stats_structtype_st(name, structtype_members) ::= <<
/*StructType*/static StructType <name> = new StructType("<name>");
static {
    <structtype_members; separator="\n">
}
>>

structtype_members_st(name, id, type) ::= <<
/*StructType*/<name>.addMember("<id>", <type>);
>>

fun_def_st(type, name, paras, body) ::= <<
/*UserFunc*/static public <type> <name>(<paras>) {
    <body>
}
>>

paras_st(paras) ::= <<
<paras; separator=", ">
>>

para_st(type, name) ::= <<
<type> <name>
>>

block_st(bstats) ::= <<
/*BlockNode*/<bstats; separator="\n">
>>

ifstatement_st (aifstat, aelseifstats, aelsestat) ::= <<
/*IfNode*/<aifstat><aelseifstats; separator="s"><aelsestat>
>>

ifstat_st(exp, block) ::= <<
if (<exp> == true) {
    <block>
} 
>>

elseifstat_st(exp, block) ::= <<
else if (<exp> == true) {
    <block>
} 
>>

elsestat_st(block) ::= <<
else {
    <block>
}
>>


fun_call_st(name, arglst) ::= <<
/*FuncCallNode*/<name>(<arglst:{e |<e>}; separator=", ">)
>>

arg_st(type, arg) ::= <<
<arg>
>>

arg_copy_st(type_ins, type_java, arg) ::= <<
(<type_java>)RefType.cloneValue(<arg>, <type_ins>)
>>

atsins_move_ref_ref_st(tmp, val, type) ::= <<
/*AtsInsMove*/RefType.updateFromRefType(<tmp>, <val>, <type>);
>>

atsins_move_ref_val_st(tmp, val, type) ::= <<
/*AtsInsMove*/RefType.updateFromNonRefType(<tmp>, <val>, <type>);
>>

atsins_move_val_ref_st(tmp, val, type, type_java) ::= <<
/*AtsInsMove*/<tmp> = (<type_java>)RefType.cloneValue(<val>, <type>);
>>

atsins_move_val_val_st(tmp, val, type) ::= <<
/*AtsInsMove*/<tmp> = <val>;
>>

atsins_move_void_st(val) ::= <<
/*AtsInsMoveVoid*/<if(val)><val>;<endif>
>>

ats_ck_iseqz_st(val) ::= <<
/*AtsCkIseqz*/(<val> == 0)
>>

ats_dynload0_st(dyn_val) ::= <<
/*ATSdynload0*/Integer <dyn_val> = 0;
>>

ats_return_st(val) ::= <<
/*AtsReturn*/return<if(val)> <val>;<else>;<endif>
>>

ats_return_copy_st(val, type) ::= <<
return<if(val)> xxxRefType.cloneValue(<val>, <type>);<else>;<endif>
>>

atsins_store_ref_ref_st(dst, src, type) ::= <<
/*AtsInsStore*/RefType.updateFromRefType(<dst>, <src>, <type>);
>>

atsins_store_ref_val_st(dst, src, type) ::= <<
/*AtsInsStore*/RefType.updateFromNonRefType(<dst>, <src>, <type>);
>>

atsins_move_boxrec_st(tmp) ::= <<
/*AtsInsMoveBoxrec*/<tmp> = new HashMap\<String, Object>();
>>

atsins_move_boxrec_ref_st(tmp) ::= <<
/*AtsInsMoveBoxrec*/RefType.updateFromNonRefType(<tmp>, new HashMap\<String, Object>(), BoxedType.cType);
>>

atsins_store_boxref_ofs_val_val_st(tmp, lab, val) ::= <<
/*AtsInsStoreBoxrecOfs*/<tmp>.put("<lab>", <val>);
>>

atsins_store_boxref_ofs_val_ref_st(tmp, lab, val, labtype) ::= <<
/*AtsInsStoreBoxrecOfs*/<tmp>.put("<lab>", RefType.cloneValue(<val>, <labtype>));
>>

atsins_store_boxref_ofs_ref_val_st(tmp, lab, val) ::= <<
/*AtsInsStoreBoxrecOfs*/((Map\<String, Object>)<tmp>.getValue(BoxedType.cType)).put("<lab>", <val>);
>>

atsins_store_boxref_ofs_ref_ref_st(tmp, lab, val, labtype) ::= <<
/*AtsInsStoreBoxrecOfs*/((Map\<String, Object>)<tmp>.getValue(BoxedType.cType)).put("<lab>", RefType.cloneValue(<val>, <labtype>));
>>

ats_sel_box_rec_st(pmv, lab, labty) ::= <<
/*AtsSelBoxRec*/(<labty>)<pmv>.get("<lab>")
>>

ats_sel_box_rec_ref_st(pmv, lab, labty) ::= <<
/*AtsSelBoxRec*/(<labty>)((Map\<String, Object>)RefType.getValue(<pmv>, BoxedType.cType)).get("<lab>")
>>

ats_sel_recsin_st(pmv, tyrec, lab) ::= <<
/*ats_sel_recsin_st*/<pmv>
>>

ats_sel_flt_rec_st(pmv, lab, tylab_java) ::= <<
/*AtsSelFltRec*/(<tylab_java>)<pmv>.get("<lab>")
>>

/*AtsSelFltRec*/ats_sel_flt_rec_ref_st(pmv, lab, tyrec) ::= <<
RefType.SelFltrecOfs(<pmv>, "<lab>", <tyrec>)
>>

atsins_store_fltrec_ofs_val_val_st(tmp, tyrec, tylab, lab, val) ::= <<
/*AtsInsStoreFltrecOfs*/<tmp>.put("<lab>", <val>);
>>

atsins_store_fltrec_ofs_val_ref_st(tmp, tyrec, tylab, lab, val) ::= <<
/*AtsInsStoreFltrecOfs*/<tmp>.put("<lab>", RefType.cloneValue(<val>, <tylab>));
>>

atsins_store_fltrec_ofs_ref_val_st(tmp, tyrec, tylab, lab, val) ::= <<
/*AtsInsStoreFltrecOfs*/RefType.updateFltrecOfs(<tmp>, <val>, "<lab>", <tyrec>);
>>

atsins_store_fltrec_ofs_ref_ref_st(tmp, tyrec, tylab, lab, val) ::= <<
/*AtsInsStoreFltrecOfs*/RefType.updateFltrecOfs(<tmp>, RefType.getValue(<val>, <tylab>), "<lab>", <tyrec>);
>>


atsins_store_arrpsz_ptr_st(tmp, tyelt, tsz) ::= <<
/*AtsInsStoreArrpszPtr*/<tmp>.init(<tsz>, <tyelt>);
>>

atsins_move_arrpsz_ptr_st(tmp, psz) ::= <<
/*AtsInsMoveArrpszPtr*/<tmp> = ((ArrPsz) <psz>).getPtr();
>>

atsins_pmove_ref_st(tmp, hit, val, tyval) ::= <<
/*AtsInsPMove*/<tmp>.update(RefType.getValue(<val>, <tyval>), <hit>);
>>

atsins_pmove_st(tmp, hit, val, tyval) ::= <<
/*AtsInsPMove*/<tmp>.update(<val>, <hit>);
>>

atsins_update_ptrinc_st(tmp, sz) ::=<<
/*AtsInsUpdatePtrInc*/<tmp> = Ptrk.createPtrkOffset(<tmp>, <sz>);  
>>

ats_pvm_castfn_st(hit, exp) ::= <<
/*AtsPmvCastFn*/<!no op!>/*castfn_currently_no_op*/<exp>
>>

ats_pmv_sizeof_st(sz) ::= <<
/*AtsPmvSizeofNode*/<sz>
>>

ats_ptrof_st(lval) ::= <<
/*AtsPmvPtrof*/RefType.ptrof(<lval>)
>>

ats_pvm_ptrof_void_st() ::= <<
/*AtsPmvPtrofVoid*/null
>>

atsins_xstore_st(tmp, pmv1, pmv2, tyins, type) ::= <<
/*AtsInsXStore*/<tmp> = (<type>)RefType.cloneValue(<pmv1>, <tyins>);
RefType.updateFromRefType(<pmv1>, <pmv2>, <tyins>);
RefType.updateFromNonRefType(<pmv2>, <tmp>, <tyins>);
>>

ats_sel_arrptr_ind_ref_st(pmv, labref, tyelt) ::= <<
/*AtsSelArrPtrInd*/AtsSelArrPtrInd<pmv>.SelArrInd((Integer)<labref>.getValue(SizeType.cType), <tyelt>)
>>

ats_sel_arrptr_ind_st(pmv, lab, tyelt) ::= <<
/*AtsSelArrPtrInd*/<pmv>.SelArrInd(<lab>, <tyelt>)
>>

// ====== expression

identifier_st(id) ::= <<
<id>
>>

atom_exp_st(e) ::= <<
<e>
>>

string_exp_st(str) ::= <<
StringType.fromString(<str>)
>>

void_exp_st(e) ::= <<
SingletonValue.VOID
>>

// ====== main function

main_args_convert_st() ::= <<
Integer mainArgc = args.length + 1;

Ptrk[] arrArgv = new Ptrk[mainArgc];
arrArgv[0] = StringType.fromString("<filename>");

for (int i = 1; i \< mainArgc; ++i) {
    arrArgv[i] = StringType.fromString(args[i - 1]);
}

ArrayType argvTy = new ArrayType(PtrkType.cType, mainArgc);

Ptrk mainArgv = Ptrk.createPtrk(argvTy, arrArgv);
>>

mainats_void_0_st(init_func) ::= <<
static public void main(String [] args) {
    <init_func>;
    mainats_void_0();
}
>>

mainats_argc_argv_0_st(init_func) ::= <<
static public void main(String [] args) {
    <init_func>;
    <main_args_convert_st()>
    mainats_argc_argv_0(mainArgc, mainArgv);
}
>>

mainats_argc_argv_envp_0_st(init_func) ::= <<
static public void main(String [] args) {
    <init_func>;
    <main_args_convert_st()>
    mainats_argc_argv_envp_0(mainArgc, mainArgv, null);
}
>>

mainats_void_int_st(init_func) ::= <<
static public void main(String [] args) {
    <init_func>;
    mainats_void_int();
}
>>

mainats_argc_argv_int_st(init_func) ::= <<
static public void main(String [] args) {
    <init_func>;
    <main_args_convert_st()>
    mainats_argc_argv_int(mainArgc, mainArgv);
}
>>

mainats_argc_argv_envp_int_st(init_func) ::= <<
static public void main(String [] args) {
    <init_func>;
    <main_args_convert_st()>
    mainats_argc_argv_envp_int(mainArgc, mainArgv, null);
}
>>






















